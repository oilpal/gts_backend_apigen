/*
 * Source code generated by UnvUS.
 * Copyright(c) 2017 unvus.com All rights reserved.
 * Template skrull-pack-mybatis:src/main/java/service/Service.e.vm.java
 * Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
 */
package com.neofect.gts.core.services.srvce.service;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.neofect.gts.core.services.srvce.domain.ServicePayReceipt;
import com.neofect.gts.core.services.srvce.repository.ServicePayReceiptRepository;
import com.unvus.config.mybatis.pagination.OrderBy;
import com.unvus.query.QueryTool;


/**
 * Service for {@link ServicePayReceipt}<br/>
 */
@Service
public class ServicePayReceiptService {

    private final ServicePayReceiptRepository servicePayReceiptRepository;

    public ServicePayReceiptService(ServicePayReceiptRepository servicePayReceiptRepository) {
        this.servicePayReceiptRepository = servicePayReceiptRepository;
    }

    //region ------------------------------------------------------------------------------------------------ servicePayReceipt CRUD

    @Transactional
    public ServicePayReceipt saveServicePayReceipt(ServicePayReceipt servicePayReceipt) {
        // if (servicePayReceipt.getId() == null) {
        //     addServicePayReceipt(servicePayReceipt);
        // } else {
        //     modifyServicePayReceipt(servicePayReceipt);
        // }

        return servicePayReceipt;
    }

    private int addServicePayReceipt(ServicePayReceipt servicePayReceipt) {
        int result = servicePayReceiptRepository.insertServicePayReceipt(servicePayReceipt);
        return result;
    }

    private int modifyServicePayReceipt(ServicePayReceipt servicePayReceipt) {
        int result = servicePayReceiptRepository.updateServicePayReceipt(servicePayReceipt);
        return result;
    }

    @Transactional
    public int removeServicePayReceipt(Long id) {
        int rows = servicePayReceiptRepository.deleteServicePayReceipt(id);
        return rows;
    }

    public ServicePayReceipt getServicePayReceipt(Long id) {
        ServicePayReceipt servicePayReceipt = servicePayReceiptRepository.getServicePayReceipt(id);

        return servicePayReceipt;
    }

    public int listServicePayReceiptCnt(Map<String, Object> params) {
        int rows = servicePayReceiptRepository.listServicePayReceiptCnt(params);
        return rows;
    }

    public List<ServicePayReceipt> listServicePayReceipt(Map<String, Object> params) {
        List<ServicePayReceipt> lists = servicePayReceiptRepository.listServicePayReceipt(params);

        return lists;
    }

    public List<ServicePayReceipt> listServicePayReceiptByIds(List<Long> ids, Map<String, Object> params) {
        params.put("ids", ids);
        QueryTool.setDefaultOrderBy(new OrderBy("DEPT_ID", ids));
        QueryTool.setDefaultOrderBy(new OrderBy("CUST_ID", ids));
        QueryTool.setDefaultOrderBy(new OrderBy("PAY_DATE", ids));
        QueryTool.setDefaultOrderBy(new OrderBy("REQ_YYMM", ids));
        List<ServicePayReceipt> lists = servicePayReceiptRepository.listServicePayReceipt(params);

        return lists;
    }

    //endregion

}
