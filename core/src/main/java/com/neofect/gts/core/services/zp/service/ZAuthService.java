/*
 * Source code generated by UnvUS.
 * Copyright(c) 2017 unvus.com All rights reserved.
 * Template skrull-pack-mybatis:src/main/java/service/Service.e.vm.java
 * Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
 */
package com.neofect.gts.core.services.zp.service;

import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.neofect.gts.core.services.zp.domain.ZAuth;
import com.neofect.gts.core.services.zp.repository.ZAuthRepository;
import com.unvus.config.mybatis.pagination.OrderBy;
import com.unvus.query.QueryTool;


/**
 * Service for {@link ZAuth}<br/>
 */
@Service
public class ZAuthService {

    private final ZAuthRepository zAuthRepository;

    public ZAuthService(ZAuthRepository zAuthRepository) {
        this.zAuthRepository = zAuthRepository;
    }

    //region ------------------------------------------------------------------------------------------------ zAuth CRUD

    @Transactional
    public ZAuth saveZAuth(ZAuth zAuth) {
        // if (zAuth.getId() == null) {
        //     addZAuth(zAuth);
        // } else {
        //     modifyZAuth(zAuth);
        // }

        return zAuth;
    }

    private int addZAuth(ZAuth zAuth) {
        int result = zAuthRepository.insertZAuth(zAuth);
        return result;
    }

    private int modifyZAuth(ZAuth zAuth) {
        int result = zAuthRepository.updateZAuth(zAuth);
        return result;
    }

    @Transactional
    public int removeZAuth(Long id) {
        int rows = zAuthRepository.deleteZAuth(id);
        return rows;
    }

    public ZAuth getZAuth(Long id) {
        ZAuth zAuth = zAuthRepository.getZAuth(id);

        return zAuth;
    }

    public int listZAuthCnt(Map<String, Object> params) {
        int rows = zAuthRepository.listZAuthCnt(params);
        return rows;
    }

    public List<ZAuth> listZAuth(Map<String, Object> params) {
        List<ZAuth> lists = zAuthRepository.listZAuth(params);

        return lists;
    }

    public List<ZAuth> listZAuthByIds(List<Long> ids, Map<String, Object> params) {
        params.put("ids", ids);
        QueryTool.setDefaultOrderBy(new OrderBy("COMPCODE", ids));
        QueryTool.setDefaultOrderBy(new OrderBy("AUTHCODE", ids));
        List<ZAuth> lists = zAuthRepository.listZAuth(params);

        return lists;
    }

    //endregion

}
