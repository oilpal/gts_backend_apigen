/*
 * Source code generated by UnvUS.
 * Copyright(c) 2017 unvus.com All rights reserved.
 * Template skrull-pack-mybatis:src/main/java/domain/Entity.e.vm.java
 * Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
 */
package com.neofect.gts.core.services.user.domain;

import java.io.Serializable;
import java.util.Collection;
import java.util.Set;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.unvus.domain.Authority;
import com.neofect.gts.core.services.user.domain.query.field.UserAccountField;
import com.neofect.gts.core.services.user.domain.query.field.UserField;
import org.apache.ibatis.type.Alias;

import lombok.Data;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

/**
 * 사용자
 * 로그인시 expired, disabled, locked, dormant 는 관계 없이 deleted 가 아닌 사용자만 가져온다.
 * deleted 는 close 와 같다. 단 close 사유 코드가 관리자 삭제가 된다.
 */
@Alias("userAccount")
@Data
public class UserAccount extends UserAccount_ implements Serializable, UserDetails {

    private static final long serialVersionUID = 1L;

    @JsonIgnore
    public static UserAccountField FIELDS(String prefix) {
        return new UserAccountField() {
            public String prefix() {
                return prefix;
            }
        };
    }

    // 패스워드 만료 여부
    private boolean credentialsExpired = false;

    private Set<Authority> authorities;

    private User user;

    @Override
    public String getPassword() {
        return getPwd();
    }

    @Override
    public String getUsername() {
        return getLogin();
    }

    /**
     * 계정 만료 여부
     * @return
     */
    @Override
    public boolean isAccountNonExpired() {
        return !getExpired();
    }

    /**
     * 계정 잠김 여부
     * @return
     */
    @Override
    public boolean isAccountNonLocked() {
        return !getLocked();
    }

    /**
     * 패스워드 비 만료 여부
     * @return
     */
    @Override
    public boolean isCredentialsNonExpired() {
        return !isCredentialsExpired();
    }

    /**
     * 계정 활성화 여부
     * @return
     */
    @Override
    public boolean isEnabled() {
        return !getDisabled();
    }

    @Override
    public void setEnabled(boolean enabled) {
        this.setDisabled(!enabled);
    }

    @Override
    public void setPassword(String password) {
        setPwd(password);
    }

    @Override
    public String getName() {
        return user == null?null:user.getName();
    }

    @Override
    public void setName(String name) {
        if(user == null) {
            user = new User();
        }
        user.setName(name);
    }
}
