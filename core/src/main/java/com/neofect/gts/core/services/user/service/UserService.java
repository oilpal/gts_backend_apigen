/*
 * Source code generated by UnvUS.
 * Copyright(c) 2017 unvus.com All rights reserved.
 * Template skrull-pack-mybatis:src/main/java/service/Service.e.vm.java
 * Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
 */
package com.neofect.gts.core.services.user.service;

import com.neofect.gts.core.services.user.domain.PersistentToken;
import com.neofect.gts.core.services.user.domain.User;
import com.neofect.gts.core.services.user.domain.UserAccount;
import com.neofect.gts.core.services.user.domain.enums.AccountType;
import com.neofect.gts.core.services.user.domain.query.field.UserAccountField;
import com.neofect.gts.core.services.user.repository.UserAccountRepository;
import com.unvus.config.mybatis.pagination.OrderBy;
import com.neofect.gts.core.services.user.domain.PersistentToken;
import com.neofect.gts.core.services.user.domain.User;
import com.neofect.gts.core.services.user.domain.UserAccount;
import com.neofect.gts.core.services.user.domain.enums.AccountType;
import com.neofect.gts.core.services.user.domain.query.field.UserAccountField;
import com.neofect.gts.core.services.user.domain.query.field.UserField;
import com.neofect.gts.core.services.user.repository.PersistentTokenRepository;
import com.neofect.gts.core.services.user.repository.UserAccountRepository;
import com.neofect.gts.core.services.user.repository.UserRepository;
import com.unvus.query.QueryBuilder;
import com.unvus.query.QueryTool;
import com.unvus.query.frag.Oper;
import com.unvus.query.parser.DynamicParserPlugin;
import com.unvus.query.parser.DynamicParserPlugin.Mapper;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;

/**
 * Service for {@link User}<br/>
 */
@RequiredArgsConstructor
@Service
public class UserService {

    private final UserAccountRepository userAccountRepository;
    private final UserRepository userRepository;
    private final PersistentTokenRepository persistentTokenRepository;


    //region ------------------------------------------------------------------------------------------------ userAccount CRUD

    @Transactional
    public UserAccount saveUserAccount(UserAccount userAccount) {
        if (userAccount.getId() == null) {
            addUserAccount(userAccount);
        } else {
            modifyUserAccount(userAccount);
        }

        return userAccount;
    }

    private int addUserAccount(UserAccount userAccount) {
        int result = userAccountRepository.insertUserAccount(userAccount);
        return result;
    }

    private int modifyUserAccount(UserAccount userAccount) {
        int result = userAccountRepository.updateUserAccount(userAccount);
        return result;
    }

    @Transactional
    public int removeUserAccount(Long id) {
        int rows = userAccountRepository.markAsDelete(id);
        return rows;
    }

    public UserAccount getUserAccount(Long id) {
        UserAccount userAccount = userAccountRepository.getUserAccount(id);

        return userAccount;
    }

    public int listUserAccountCnt(Map<String, Object> params) {
        int rows = userAccountRepository.listUserAccountCnt(params);
        return rows;
    }

    public List<UserAccount> listUserAccount(Map<String, Object> params, boolean includeDeleted) {
        if(includeDeleted) {
            params.remove("deleted");
        }else {
            params.put("deleted", false);
        }

        List<UserAccount> lists = userAccountRepository.listUserAccount(params);

        return lists;
    }

    public List<UserAccount> listUserAccount(Map<String, Object> params) {
        return listUserAccount(params, false);
    }

    public List<UserAccount> listUserAccountByIds(List<Long> ids, Map<String, Object> params) {
        params.put("ids", ids);
        QueryTool.setDefaultOrderBy(new OrderBy("acnt_id", ids));
        List<UserAccount> lists = userAccountRepository.listUserAccount(params);

        return lists;
    }


    public UserAccount getUserAccountForLogin(String login, AccountType accountType) {
        UserAccount userAccount = userAccountRepository.getUserAccountByLogin(login, accountType);

        return userAccount;
    }

    //endregion

    //region ------------------------------------------------------------------------------------------------ user CRUD

    @Transactional
    public User saveUser(User user) {
        if (user.getId() == null) {
            addUser(user);
        } else {
            modifyUser(user);
        }

        return user;
    }

    private int addUser(User user) {
        int result = userRepository.insertUser(user);
        return result;
    }

    private int modifyUser(User user) {
        int result = userRepository.updateUser(user);
        return result;
    }

    @Transactional
    public int removeUser(Long id) {
        int rows = userRepository.deleteUser(id);
        return rows;
    }

    public User getUser(Long id) {
        User user = userRepository.getUser(id);

        return user;
    }

    public int listUserCnt(Map<String, Object> params) {
        int rows = userRepository.listUserCnt(params);
        return rows;
    }

    public List<User> listUser(Map<String, Object> params) {

        UserField u = User.FIELDS("u");
        UserAccountField ua = UserAccount.FIELDS("ua");

        QueryBuilder builder = new QueryBuilder(params, u, ua);
        builder
            .and(ua.namespace(), "default")
            .and(ua.type(), AccountType.MEMBER)
            .applyPlugins(
                // _d.keyword.type, _d.keyword.value
                new DynamicParserPlugin(
                    "keyword",
                        new Mapper("name", u.name()),
                        new Mapper("login", ua.login()))
            )
//            .sub(
//                qb -> {
//                    qb.and(ua.createdDt(), LocalDateTime.now(), Oper.LTE)
//                        .or(ua.createdDt(), LocalDateTime.now().minusDays(60L), Oper.GTE);
//                }
//            )
//            .and(u.name(), "김재", Oper.LIKE_AFTER)
        ;


        List<User> lists = userRepository.listUser(builder.build());

        return lists;
    }

    public List<User> listUserByIds(List<Long> ids, Map<String, Object> params) {
        params.put("ids", ids);
        QueryTool.setDefaultOrderBy(new OrderBy("user_id", ids));
        List<User> lists = userRepository.listUser(params);

        return lists;
    }

    //endregion

    //region ------------------------------------------------------------------------------------------------ persistentToken CRUD

    @Transactional
    public PersistentToken savePersistentToken(PersistentToken persistentToken) {
        if (persistentToken.getId() == null) {
            addPersistentToken(persistentToken);
        } else {
            modifyPersistentToken(persistentToken);
        }

        return persistentToken;
    }

    private int addPersistentToken(PersistentToken persistentToken) {
        int result = persistentTokenRepository.insertPersistentToken(persistentToken);
        return result;
    }

    private int modifyPersistentToken(PersistentToken persistentToken) {
        int result = persistentTokenRepository.updatePersistentToken(persistentToken);
        return result;
    }

    @Transactional
    public int removePersistentToken(Long id) {
        int rows = persistentTokenRepository.deletePersistentToken(id);
        return rows;
    }

    public PersistentToken getPersistentToken(Long id) {
        PersistentToken persistentToken = persistentTokenRepository.getPersistentToken(id);

        return persistentToken;
    }

    public PersistentToken getPersistentTokenBySeries(String series) {
        return persistentTokenRepository.getPersistentTokenBySeries(series);
    }


    public int listPersistentTokenCnt(Map<String, Object> params) {
        int rows = persistentTokenRepository.listPersistentTokenCnt(params);
        return rows;
    }

    public List<PersistentToken> listPersistentToken(Map<String, Object> params) {
        List<PersistentToken> lists = persistentTokenRepository.listPersistentToken(params);

        return lists;
    }

    public List<PersistentToken> listPersistentTokenByIds(List<Long> ids, Map<String, Object> params) {
        params.put("ids", ids);
        QueryTool.setDefaultOrderBy(new OrderBy("pt_id", ids));
        List<PersistentToken> lists = persistentTokenRepository.listPersistentToken(params);

        return lists;
    }

    @Transactional
    public void removePersistentTokenBySeries(String series) {
        persistentTokenRepository.deletePersistentTokenBySeries(series);
    }

    //endregion

}
