<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.common.repository.ActionLogRepository_">

    <!--region ====================================================================================== reference only -->
    <resultMap id="_metaInfo" type="java.util.Map">
        <!-- Generated Files -->
        <result property="model_" column="com.neofect.gts.core.services.common.domain.ActionLog_"/>
        <result property="repository_" column="com.neofect.gts.core.services.common.repository.ActionLogRepository_"/>
        <!-- Extended Files -->
        <result property="model" column="com.neofect.gts.core.services.common.domain.ActionLog"/>
        <result property="repository" column="com.neofect.gts.core.services.common.repository.ActionLogRepository"/>
    </resultMap>

    <!--
     ! All Columns
     !  al_id, al_ref_target, al_ref_target_key, al_ref_target_type, al_action, al_log, al_message, al_ip, al_year, al_month, al_day, al_created_by, al_created_dt
    -->

    <!--endregion =================================================================================== reference only -->

    <resultMap id="simpleActionLogResult_" type="com.neofect.gts.core.services.common.domain.ActionLog">
        <!-- 아이디 -->
        <id     property="id" column="al_id"/>
        <!-- 참조구분 -->
        <result property="refTarget" column="al_ref_target"/>
        <!-- 참조구분키 -->
        <result property="refTargetKey" column="al_ref_target_key"/>
        <!-- 참조타입 -->
        <result property="refTargetType" column="al_ref_target_type"/>
        <!-- 액션 -->
        <result property="action" column="al_action"/>
        <!-- 로그 -->
        <result property="log" column="al_log"/>
        <!-- 메시지 -->
        <result property="message" column="al_message"/>
        <!-- IP -->
        <result property="ip" column="al_ip"/>
        <!-- 년 -->
        <result property="year" column="al_year"/>
        <!-- 월 -->
        <result property="month" column="al_month"/>
        <!-- 일 -->
        <result property="day" column="al_day"/>
        <!-- 등록자 -->
        <result property="createdBy" column="al_created_by"/>
        <!-- 등록일시 -->
        <result property="createdDt" column="al_created_dt"/>
    </resultMap>

    <sql id="simpleActionLogCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="ids != null and !ids.isEmpty()">
            AND ${_alias}al_id IN <foreach collection="ids" item="idValue" open="(" close=")" separator=",">#{ idValue }</foreach>
        </if>
        <if test="id != null">
            AND ${_alias}al_id = #{id}
        </if>
        <if test="refTarget != null">
            AND ${_alias}al_ref_target = #{refTarget}
        </if>
        <if test="refTargetKey != null">
            AND ${_alias}al_ref_target_key = #{refTargetKey}
        </if>
        <if test="refTargetType != null and refTargetType != ''">
            AND ${_alias}al_ref_target_type = #{refTargetType}
        </if>
        <if test="action != null">
            AND ${_alias}al_action = #{action}
        </if>
        <if test="log != null and log != ''">
            AND ${_alias}al_log = #{log}
        </if>
        <if test="message != null and message != ''">
            AND ${_alias}al_message = #{message}
        </if>
        <if test="ip != null and ip != ''">
            AND ${_alias}al_ip = #{ip}
        </if>
        <if test="year != null">
            AND ${_alias}al_year = #{year}
        </if>
        <if test="month != null">
            AND ${_alias}al_month = #{month}
        </if>
        <if test="day != null">
            AND ${_alias}al_day = #{day}
        </if>
        <if test="createdBy != null">
            AND ${_alias}al_created_by = #{createdBy}
        </if>
        <if test="createdDt != null and createdDt.enabled == true">
            <if test="createdDt.from != null and createdDt.from != ''">
            AND ${_alias}al_created_dt >= STR_TO_DATE(#{createdDt.from}, '%Y.%m.%d')
            </if>
            <if test="createdDt.to != null and createdDt.to != ''">
            AND ${_alias}al_created_dt <![CDATA[ < ]]> DATE_ADD(STR_TO_DATE(#{createdDt.to}, '%Y.%m.%d'), INTERVAL 1 DAY)
            </if>
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}al_id AS ${_asPrefix}al_id, ${_alias}al_ref_target AS ${_asPrefix}al_ref_target, ${_alias}al_ref_target_key AS ${_asPrefix}al_ref_target_key, ${_alias}al_ref_target_type AS ${_asPrefix}al_ref_target_type, ${_alias}al_action AS ${_asPrefix}al_action, ${_alias}al_log AS ${_asPrefix}al_log, ${_alias}al_message AS ${_asPrefix}al_message, ${_alias}al_ip AS ${_asPrefix}al_ip, ${_alias}al_year AS ${_asPrefix}al_year, ${_alias}al_month AS ${_asPrefix}al_month, ${_alias}al_day AS ${_asPrefix}al_day, ${_alias}al_created_by AS ${_asPrefix}al_created_by, ${_alias}al_created_dt AS ${_asPrefix}al_created_dt        </when>
        <otherwise>
            ${_alias}al_id, ${_alias}al_ref_target, ${_alias}al_ref_target_key, ${_alias}al_ref_target_type, ${_alias}al_action, ${_alias}al_log, ${_alias}al_message, ${_alias}al_ip, ${_alias}al_year, ${_alias}al_month, ${_alias}al_day, ${_alias}al_created_by, ${_alias}al_created_dt        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}al_ref_target AS ${_asPrefix}al_ref_target, ${_alias}al_ref_target_key AS ${_asPrefix}al_ref_target_key, ${_alias}al_ref_target_type AS ${_asPrefix}al_ref_target_type, ${_alias}al_action AS ${_asPrefix}al_action, ${_alias}al_log AS ${_asPrefix}al_log, ${_alias}al_message AS ${_asPrefix}al_message, ${_alias}al_ip AS ${_asPrefix}al_ip, ${_alias}al_year AS ${_asPrefix}al_year, ${_alias}al_month AS ${_asPrefix}al_month, ${_alias}al_day AS ${_asPrefix}al_day, ${_alias}al_created_by AS ${_asPrefix}al_created_by, ${_alias}al_created_dt AS ${_asPrefix}al_created_dt        </when>
        <otherwise>
            ${_alias}al_ref_target, ${_alias}al_ref_target_key, ${_alias}al_ref_target_type, ${_alias}al_action, ${_alias}al_log, ${_alias}al_message, ${_alias}al_ip, ${_alias}al_year, ${_alias}al_month, ${_alias}al_day, ${_alias}al_created_by, ${_alias}al_created_dt        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}al_id, ${_alias}al_ref_target, ${_alias}al_ref_target_key, ${_alias}al_ref_target_type, ${_alias}al_action, ${_alias}al_log, ${_alias}al_message, ${_alias}al_ip, ${_alias}al_year, ${_alias}al_month, ${_alias}al_day, ${_alias}al_created_by, ${_alias}al_created_dt    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}al_ref_target, ${_alias}al_ref_target_key, ${_alias}al_ref_target_type, ${_alias}al_action, ${_alias}al_log, ${_alias}al_message, ${_alias}al_ip, ${_alias}al_year, ${_alias}al_month, ${_alias}al_day, ${_alias}al_created_by, ${_alias}al_created_dt    </sql>

    <select id="simpleGetActionLog" parameterType="long" resultMap="simpleActionLogResult_">
        /* ActionLogRepository_.simpleGetActionLog */

        SELECT
            <include refid="columns_" />
        FROM
            nv_action_log
        WHERE
        al_id = #{id}
	</select>

    <select id="simpleListActionLogCnt" resultType="int">
        /* ActionLogRepository_.simpleListActionLogCnt */

        SELECT COUNT(*)
        FROM nv_action_log
        <include refid="simpleActionLogCondition_" />
    </select>

    <select id="simpleListActionLog" resultMap="simpleActionLogResult_">
        /* ActionLogRepository_.simpleListActionLog */
        SELECT
            <include refid="columns_" />
        FROM nv_action_log
        <include refid="simpleActionLogCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="refTarget != null">
            ${_alias}al_ref_target = #{refTarget},
        </if>
        <if test="refTargetKey != null">
            ${_alias}al_ref_target_key = #{refTargetKey},
        </if>
        <if test="refTargetType != null and refTargetType != ''">
            ${_alias}al_ref_target_type = #{refTargetType},
        </if>
        <if test="action != null">
            ${_alias}al_action = #{action},
        </if>
        <if test="log != null and log != ''">
            ${_alias}al_log = #{log},
        </if>
        <if test="message != null and message != ''">
            ${_alias}al_message = #{message},
        </if>
        <if test="ip != null and ip != ''">
            ${_alias}al_ip = #{ip},
        </if>
        <if test="year != null">
            ${_alias}al_year = #{year},
        </if>
        <if test="month != null">
            ${_alias}al_month = #{month},
        </if>
        <if test="day != null">
            ${_alias}al_day = #{day},
        </if>
    </sql>

    <update id="updateActionLog" parameterType="com.neofect.gts.core.services.common.domain.ActionLog">
        /* com.unvus.iflex.core.services.common.repository.ActionLogRepository_.updateActionLog */

        UPDATE nv_action_log
        SET
             al_ref_target = #{refTarget}
            , al_ref_target_key = #{refTargetKey}
            , al_ref_target_type = #{refTargetType}
            , al_action = #{action}
            , al_log = #{log}
            , al_message = #{message}
            , al_ip = #{ip}
            , al_year = #{year}
            , al_month = #{month}
            , al_day = #{day}
        WHERE
            al_id = #{id}
    </update>

    <update id="updateActionLogDynamic" parameterType="com.neofect.gts.core.services.common.domain.ActionLog">
        /* ActionLogRepository_.updateActionLogDynamic */

        UPDATE nv_action_log
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            al_id = #{id}
    </update>

    <delete id="deleteActionLog" parameterType="long">
        /* com.unvus.iflex.core.services.common.repository.ActionLogRepository_.deleteActionLog */

        DELETE FROM nv_action_log
        WHERE
            al_id = #{id}
    </delete>

    <sql id="insert_values_">

        #{refTarget},
        #{refTargetKey},
        #{refTargetType},
        #{action},
        #{log},
        #{message},
        #{ip},
        #{year},
        #{month},
        #{day},
        #{createdBy},
        #{createdDt}
    </sql>

    <insert id="insertActionLog">
        /* ActionLogRepository_.insertActionLog */


        INSERT INTO nv_action_log
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

