<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.common.repository.CodeCustprotectorRepository_">

    <resultMap id="simpleCodeCustprotectorResult_" type="com.neofect.gts.core.services.common.domain.CodeCustprotector">
        <!-- 고객ID -->
        <id     property="custId" column="CUST_ID"/>
        <!-- 순번 -->
        <id     property="proSeq" column="PRO_SEQ"/>
        <!-- 보호자명 -->
        <result property="proName" column="PRO_NAME"/>
        <!-- 관계 -->
        <result property="relationDiv" column="RELATION_DIV"/>
        <!-- 이메일 -->
        <result property="email" column="EMAIL"/>
        <!-- 전화번호 -->
        <result property="phone" column="PHONE"/>
        <!-- 핸드폰 -->
        <result property="hp" column="HP"/>
        <!-- 우편번호 -->
        <result property="zipCode" column="ZIP_CODE"/>
        <!-- 주소1 -->
        <result property="addr1" column="ADDR1"/>
        <!-- 주소2 -->
        <result property="addr2" column="ADDR2"/>
        
        <result property="rowInputEmpNo" column="ROW_INPUT_EMP_NO"/>
        
        <result property="rowInputDate" column="ROW_INPUT_DATE"/>
        
        <result property="rowInputIp" column="ROW_INPUT_IP"/>
        
        <result property="rowUpdateEmpNo" column="ROW_UPDATE_EMP_NO"/>
        
        <result property="rowUpdateDate" column="ROW_UPDATE_DATE"/>
        
        <result property="rowUpdateIp" column="ROW_UPDATE_IP"/>
        
        <result property="birthDate" column="BIRTH_DATE"/>
    </resultMap>

    <sql id="simpleCodeCustprotectorCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="custIds != null and !custIds.isEmpty()">
            AND ${_alias}CUST_ID IN <foreach collection="custIds" item="custIdValue" open="(" close=")" separator=",">#{ custIdValue }</foreach>
        </if>
        <if test="proSeqs != null and !proSeqs.isEmpty()">
            AND ${_alias}PRO_SEQ IN <foreach collection="proSeqs" item="proSeqValue" open="(" close=")" separator=",">#{ proSeqValue }</foreach>
        </if>
        <if test="custId != null">
            AND ${_alias}CUST_ID = #{custId}
        </if>
        <if test="proSeq != null">
            AND ${_alias}PRO_SEQ = #{proSeq}
        </if>
        <if test="proName != null and proName != ''">
            AND ${_alias}PRO_NAME = #{proName}
        </if>
        <if test="relationDiv != null and relationDiv != ''">
            AND ${_alias}RELATION_DIV = #{relationDiv}
        </if>
        <if test="email != null and email != ''">
            AND ${_alias}EMAIL = #{email}
        </if>
        <if test="phone != null and phone != ''">
            AND ${_alias}PHONE = #{phone}
        </if>
        <if test="hp != null and hp != ''">
            AND ${_alias}HP = #{hp}
        </if>
        <if test="zipCode != null and zipCode != ''">
            AND ${_alias}ZIP_CODE = #{zipCode}
        </if>
        <if test="addr1 != null and addr1 != ''">
            AND ${_alias}ADDR1 = #{addr1}
        </if>
        <if test="addr2 != null and addr2 != ''">
            AND ${_alias}ADDR2 = #{addr2}
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            AND ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo}
        </if>
        <if test="rowInputDate != null and rowInputDate.enabled == true">
            <if test="rowInputDate.from != null and rowInputDate.from != ''">
            AND ${_alias}ROW_INPUT_DATE >= TO_DATE(#{rowInputDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowInputDate.to != null and rowInputDate.to != ''">
            AND ${_alias}ROW_INPUT_DATE <![CDATA[ < ]]> TO_DATE(#{rowInputDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            AND ${_alias}ROW_INPUT_IP = #{rowInputIp}
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            AND ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            AND ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate}
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            AND ${_alias}ROW_UPDATE_IP = #{rowUpdateIp}
        </if>
        <if test="birthDate != null and birthDate != ''">
            AND ${_alias}BIRTH_DATE = #{birthDate}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}CUST_ID AS ${_asPrefix}CUST_ID, ${_alias}PRO_SEQ AS ${_asPrefix}PRO_SEQ, ${_alias}PRO_NAME AS ${_asPrefix}PRO_NAME, ${_alias}RELATION_DIV AS ${_asPrefix}RELATION_DIV, ${_alias}EMAIL AS ${_asPrefix}EMAIL, ${_alias}PHONE AS ${_asPrefix}PHONE, ${_alias}HP AS ${_asPrefix}HP, ${_alias}ZIP_CODE AS ${_asPrefix}ZIP_CODE, ${_alias}ADDR1 AS ${_asPrefix}ADDR1, ${_alias}ADDR2 AS ${_asPrefix}ADDR2, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}BIRTH_DATE AS ${_asPrefix}BIRTH_DATE        </when>
        <otherwise>
            ${_alias}CUST_ID, ${_alias}PRO_SEQ, ${_alias}PRO_NAME, ${_alias}RELATION_DIV, ${_alias}EMAIL, ${_alias}PHONE, ${_alias}HP, ${_alias}ZIP_CODE, ${_alias}ADDR1, ${_alias}ADDR2, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}BIRTH_DATE        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}PRO_NAME AS ${_asPrefix}PRO_NAME, ${_alias}RELATION_DIV AS ${_asPrefix}RELATION_DIV, ${_alias}EMAIL AS ${_asPrefix}EMAIL, ${_alias}PHONE AS ${_asPrefix}PHONE, ${_alias}HP AS ${_asPrefix}HP, ${_alias}ZIP_CODE AS ${_asPrefix}ZIP_CODE, ${_alias}ADDR1 AS ${_asPrefix}ADDR1, ${_alias}ADDR2 AS ${_asPrefix}ADDR2, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}BIRTH_DATE AS ${_asPrefix}BIRTH_DATE        </when>
        <otherwise>
            ${_alias}PRO_NAME, ${_alias}RELATION_DIV, ${_alias}EMAIL, ${_alias}PHONE, ${_alias}HP, ${_alias}ZIP_CODE, ${_alias}ADDR1, ${_alias}ADDR2, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}BIRTH_DATE        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}CUST_ID, ${_alias}PRO_SEQ, ${_alias}PRO_NAME, ${_alias}RELATION_DIV, ${_alias}EMAIL, ${_alias}PHONE, ${_alias}HP, ${_alias}ZIP_CODE, ${_alias}ADDR1, ${_alias}ADDR2, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}BIRTH_DATE    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}PRO_NAME, ${_alias}RELATION_DIV, ${_alias}EMAIL, ${_alias}PHONE, ${_alias}HP, ${_alias}ZIP_CODE, ${_alias}ADDR1, ${_alias}ADDR2, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}BIRTH_DATE    </sql>

    <select id="simpleGetCodeCustprotector" parameterType="long" resultMap="simpleCodeCustprotectorResult_">
        /* com.neofect.gts.core.services.common.repository.CodeCustprotectorRepository_.simpleGetCodeCustprotector */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.CODE_CUSTPROTECTOR
        WHERE
        CUST_ID = #{custId}
        AND PRO_SEQ = #{proSeq}
	</select>

    <select id="simpleListCodeCustprotectorCnt" resultType="int">
        /* com.neofect.gts.core.services.common.repository.CodeCustprotectorRepository_.simpleListCodeCustprotectorCnt */

        SELECT COUNT(*)
        FROM GTS2016.CODE_CUSTPROTECTOR
        <include refid="simpleCodeCustprotectorCondition_" />
    </select>

    <select id="simpleListCodeCustprotector" resultMap="simpleCodeCustprotectorResult_">
        /* com.neofect.gts.core.services.common.repository.CodeCustprotectorRepository_.simpleListCodeCustprotector */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.CODE_CUSTPROTECTOR
        <include refid="simpleCodeCustprotectorCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="proName != null and proName != ''">
            ${_alias}PRO_NAME = #{proName},
        </if>
        <if test="relationDiv != null and relationDiv != ''">
            ${_alias}RELATION_DIV = #{relationDiv},
        </if>
        <if test="email != null and email != ''">
            ${_alias}EMAIL = #{email},
        </if>
        <if test="phone != null and phone != ''">
            ${_alias}PHONE = #{phone},
        </if>
        <if test="hp != null and hp != ''">
            ${_alias}HP = #{hp},
        </if>
        <if test="zipCode != null and zipCode != ''">
            ${_alias}ZIP_CODE = #{zipCode},
        </if>
        <if test="addr1 != null and addr1 != ''">
            ${_alias}ADDR1 = #{addr1},
        </if>
        <if test="addr2 != null and addr2 != ''">
            ${_alias}ADDR2 = #{addr2},
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo},
        </if>
        <if test="rowInputDate != null">
            ${_alias}ROW_INPUT_DATE = #{rowInputDate},
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            ${_alias}ROW_INPUT_IP = #{rowInputIp},
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo},
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate},
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            ${_alias}ROW_UPDATE_IP = #{rowUpdateIp},
        </if>
        <if test="birthDate != null and birthDate != ''">
            ${_alias}BIRTH_DATE = #{birthDate},
        </if>
    </sql>

    <update id="updateCodeCustprotector" parameterType="com.neofect.gts.core.services.common.domain.CodeCustprotector">
        /* com.neofect.gts.core.services.common.repository.CodeCustprotectorRepository_.updateCodeCustprotector */

        UPDATE GTS2016.CODE_CUSTPROTECTOR
        SET
             PRO_NAME = #{proName}
            , RELATION_DIV = #{relationDiv}
            , EMAIL = #{email}
            , PHONE = #{phone}
            , HP = #{hp}
            , ZIP_CODE = #{zipCode}
            , ADDR1 = #{addr1}
            , ADDR2 = #{addr2}
            , ROW_INPUT_EMP_NO = #{rowInputEmpNo}
            , ROW_INPUT_DATE = #{rowInputDate}
            , ROW_INPUT_IP = #{rowInputIp}
            , ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
            , ROW_UPDATE_DATE = #{rowUpdateDate}
            , ROW_UPDATE_IP = #{rowUpdateIp}
            , BIRTH_DATE = #{birthDate}
        WHERE
            CUST_ID = #{custId}
            AND PRO_SEQ = #{proSeq}
    </update>

    <update id="updateCodeCustprotectorDynamic" parameterType="com.neofect.gts.core.services.common.domain.CodeCustprotector">
        /* com.neofect.gts.core.services.common.repository.CodeCustprotectorRepository_.updateCodeCustprotectorDynamic */

        UPDATE GTS2016.CODE_CUSTPROTECTOR
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            CUST_ID = #{custId}
            AND PRO_SEQ = #{proSeq}
    </update>

    <delete id="deleteCodeCustprotector" parameterType="long">
        /* com.neofect.gts.core.services.common.repository.CodeCustprotectorRepository_.deleteCodeCustprotector */

        DELETE FROM GTS2016.CODE_CUSTPROTECTOR
        WHERE
            CUST_ID = #{custId}
            AND PRO_SEQ = #{proSeq}
    </delete>

    <sql id="insert_values_">

        #{proName},
        #{relationDiv},
        #{email},
        #{phone},
        #{hp},
        #{zipCode},
        #{addr1},
        #{addr2},
        #{rowInputEmpNo},
        #{rowInputDate},
        #{rowInputIp},
        #{rowUpdateEmpNo},
        #{rowUpdateDate},
        #{rowUpdateIp},
        #{birthDate}
    </sql>

    <insert id="insertCodeCustprotector">
        /* com.neofect.gts.core.services.common.repository.CodeCustprotectorRepository_.insertCodeCustprotector */


        INSERT INTO GTS2016.CODE_CUSTPROTECTOR
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

