<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.am.repository.AmCodeDepositRepository_">

    <resultMap id="simpleAmCodeDepositResult_" type="com.neofect.gts.core.services.am.domain.AmCodeDeposit">
        <!-- 계좌번호 -->
        <id     property="depositNo" column="DEPOSIT_NO"/>
        <!-- 회사코드 -->
        <id     property="companyCode" column="COMPANY_CODE"/>
        <!-- 은행코드 -->
        <result property="bankCode" column="BANK_CODE"/>
        <!-- 계정코드 -->
        <result property="acntCode" column="ACNT_CODE"/>
        <!-- 계좌명칭_예금주 -->
        <result property="depositName" column="DEPOSIT_NAME"/>
        <!-- 사용여부 -->
        <result property="useYn" column="USE_YN"/>
        <!-- 지급계좌여부 -->
        <result property="payYn" column="PAY_YN"/>
        <!-- 당좌계좌여부 -->
        <result property="depositTransYn" column="DEPOSIT_TRANS_YN"/>
        <!-- 당좌차월한도액 -->
        <result property="depositLimitAmt" column="DEPOSIT_LIMIT_AMT"/>
        <!-- 계약일자 -->
        <result property="contractDate" column="CONTRACT_DATE"/>
        <!-- 만기일자 -->
        <result property="expireDate" column="EXPIRE_DATE"/>
        <!-- 중도해약일자 -->
        <result property="annulDate" column="ANNUL_DATE"/>
        <!-- 증서번호 -->
        <result property="bondNo" column="BOND_NO"/>
        <!-- 원금 -->
        <result property="capAmt" column="CAP_AMT"/>
        <!-- 만기계약금액 -->
        <result property="contractAmt" column="CONTRACT_AMT"/>
        <!-- 월이자 -->
        <result property="intAmt" column="INT_AMT"/>
        <!-- 이율 -->
        <result property="corpRate" column="CORP_RATE"/>
        <!-- 회당불입금액 -->
        <result property="payAmt" column="PAY_AMT"/>
        <!-- 회당불입일자 -->
        <result property="payDate" column="PAY_DATE"/>
        <!-- 출력여부 -->
        <result property="printYn" column="PRINT_YN"/>
        <!-- 계좌구분 -->
        <result property="depositDiv" column="DEPOSIT_DIV"/>
        <!-- 이자_계정코드 -->
        <result property="acntCodeInt" column="ACNT_CODE_INT"/>
        
        <result property="securityNo" column="SECURITY_NO"/>
        
        <result property="securitySeq" column="SECURITY_SEQ"/>
        <!-- 입력담당 -->
        <result property="inputDutyId" column="INPUT_DUTY_ID"/>
        <!-- 입력일시 -->
        <result property="inputDate" column="INPUT_DATE"/>
        <!-- 변경담당 -->
        <result property="chgDutyId" column="CHG_DUTY_ID"/>
        <!-- 변경일시 -->
        <result property="chgDate" column="CHG_DATE"/>
        
        <result property="custCode" column="CUST_CODE"/>
        
        <result property="rowInputEmpNo" column="ROW_INPUT_EMP_NO"/>
        
        <result property="rowInputDate" column="ROW_INPUT_DATE"/>
        
        <result property="rowInputIp" column="ROW_INPUT_IP"/>
        
        <result property="rowUpdateEmpNo" column="ROW_UPDATE_EMP_NO"/>
        
        <result property="rowUpdateDate" column="ROW_UPDATE_DATE"/>
        
        <result property="rowUpdateIp" column="ROW_UPDATE_IP"/>
    </resultMap>

    <sql id="simpleAmCodeDepositCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="depositNos != null and !depositNos.isEmpty()">
            AND ${_alias}DEPOSIT_NO IN <foreach collection="depositNos" item="depositNoValue" open="(" close=")" separator=",">#{ depositNoValue }</foreach>
        </if>
        <if test="companyCodes != null and !companyCodes.isEmpty()">
            AND ${_alias}COMPANY_CODE IN <foreach collection="companyCodes" item="companyCodeValue" open="(" close=")" separator=",">#{ companyCodeValue }</foreach>
        </if>
        <if test="depositNo != null and depositNo != ''">
            AND ${_alias}DEPOSIT_NO = #{depositNo}
        </if>
        <if test="companyCode != null and companyCode != ''">
            AND ${_alias}COMPANY_CODE = #{companyCode}
        </if>
        <if test="bankCode != null and bankCode != ''">
            AND ${_alias}BANK_CODE = #{bankCode}
        </if>
        <if test="acntCode != null and acntCode != ''">
            AND ${_alias}ACNT_CODE = #{acntCode}
        </if>
        <if test="depositName != null and depositName != ''">
            AND ${_alias}DEPOSIT_NAME = #{depositName}
        </if>
        <if test="useYn != null and useYn != ''">
            AND ${_alias}USE_YN = #{useYn}
        </if>
        <if test="payYn != null and payYn != ''">
            AND ${_alias}PAY_YN = #{payYn}
        </if>
        <if test="depositTransYn != null and depositTransYn != ''">
            AND ${_alias}DEPOSIT_TRANS_YN = #{depositTransYn}
        </if>
        <if test="depositLimitAmt != null">
            AND ${_alias}DEPOSIT_LIMIT_AMT = #{depositLimitAmt}
        </if>
        <if test="contractDate != null and contractDate != ''">
            AND ${_alias}CONTRACT_DATE = #{contractDate}
        </if>
        <if test="expireDate != null and expireDate != ''">
            AND ${_alias}EXPIRE_DATE = #{expireDate}
        </if>
        <if test="annulDate != null and annulDate != ''">
            AND ${_alias}ANNUL_DATE = #{annulDate}
        </if>
        <if test="bondNo != null and bondNo != ''">
            AND ${_alias}BOND_NO = #{bondNo}
        </if>
        <if test="capAmt != null">
            AND ${_alias}CAP_AMT = #{capAmt}
        </if>
        <if test="contractAmt != null">
            AND ${_alias}CONTRACT_AMT = #{contractAmt}
        </if>
        <if test="intAmt != null">
            AND ${_alias}INT_AMT = #{intAmt}
        </if>
        <if test="corpRate != null">
            AND ${_alias}CORP_RATE = #{corpRate}
        </if>
        <if test="payAmt != null">
            AND ${_alias}PAY_AMT = #{payAmt}
        </if>
        <if test="payDate != null and payDate != ''">
            AND ${_alias}PAY_DATE = #{payDate}
        </if>
        <if test="printYn != null and printYn != ''">
            AND ${_alias}PRINT_YN = #{printYn}
        </if>
        <if test="depositDiv != null and depositDiv != ''">
            AND ${_alias}DEPOSIT_DIV = #{depositDiv}
        </if>
        <if test="acntCodeInt != null and acntCodeInt != ''">
            AND ${_alias}ACNT_CODE_INT = #{acntCodeInt}
        </if>
        <if test="securityNo != null">
            AND ${_alias}SECURITY_NO = #{securityNo}
        </if>
        <if test="securitySeq != null">
            AND ${_alias}SECURITY_SEQ = #{securitySeq}
        </if>
        <if test="inputDutyId != null and inputDutyId != ''">
            AND ${_alias}INPUT_DUTY_ID = #{inputDutyId}
        </if>
        <if test="inputDate != null and inputDate != ''">
            AND ${_alias}INPUT_DATE = #{inputDate}
        </if>
        <if test="chgDutyId != null and chgDutyId != ''">
            AND ${_alias}CHG_DUTY_ID = #{chgDutyId}
        </if>
        <if test="chgDate != null and chgDate != ''">
            AND ${_alias}CHG_DATE = #{chgDate}
        </if>
        <if test="custCode != null and custCode != ''">
            AND ${_alias}CUST_CODE = #{custCode}
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            AND ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo}
        </if>
        <if test="rowInputDate != null and rowInputDate.enabled == true">
            <if test="rowInputDate.from != null and rowInputDate.from != ''">
            AND ${_alias}ROW_INPUT_DATE >= TO_DATE(#{rowInputDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowInputDate.to != null and rowInputDate.to != ''">
            AND ${_alias}ROW_INPUT_DATE <![CDATA[ < ]]> TO_DATE(#{rowInputDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            AND ${_alias}ROW_INPUT_IP = #{rowInputIp}
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            AND ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            AND ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate}
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            AND ${_alias}ROW_UPDATE_IP = #{rowUpdateIp}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}DEPOSIT_NO AS ${_asPrefix}DEPOSIT_NO, ${_alias}COMPANY_CODE AS ${_asPrefix}COMPANY_CODE, ${_alias}BANK_CODE AS ${_asPrefix}BANK_CODE, ${_alias}ACNT_CODE AS ${_asPrefix}ACNT_CODE, ${_alias}DEPOSIT_NAME AS ${_asPrefix}DEPOSIT_NAME, ${_alias}USE_YN AS ${_asPrefix}USE_YN, ${_alias}PAY_YN AS ${_asPrefix}PAY_YN, ${_alias}DEPOSIT_TRANS_YN AS ${_asPrefix}DEPOSIT_TRANS_YN, ${_alias}DEPOSIT_LIMIT_AMT AS ${_asPrefix}DEPOSIT_LIMIT_AMT, ${_alias}CONTRACT_DATE AS ${_asPrefix}CONTRACT_DATE, ${_alias}EXPIRE_DATE AS ${_asPrefix}EXPIRE_DATE, ${_alias}ANNUL_DATE AS ${_asPrefix}ANNUL_DATE, ${_alias}BOND_NO AS ${_asPrefix}BOND_NO, ${_alias}CAP_AMT AS ${_asPrefix}CAP_AMT, ${_alias}CONTRACT_AMT AS ${_asPrefix}CONTRACT_AMT, ${_alias}INT_AMT AS ${_asPrefix}INT_AMT, ${_alias}CORP_RATE AS ${_asPrefix}CORP_RATE, ${_alias}PAY_AMT AS ${_asPrefix}PAY_AMT, ${_alias}PAY_DATE AS ${_asPrefix}PAY_DATE, ${_alias}PRINT_YN AS ${_asPrefix}PRINT_YN, ${_alias}DEPOSIT_DIV AS ${_asPrefix}DEPOSIT_DIV, ${_alias}ACNT_CODE_INT AS ${_asPrefix}ACNT_CODE_INT, ${_alias}SECURITY_NO AS ${_asPrefix}SECURITY_NO, ${_alias}SECURITY_SEQ AS ${_asPrefix}SECURITY_SEQ, ${_alias}INPUT_DUTY_ID AS ${_asPrefix}INPUT_DUTY_ID, ${_alias}INPUT_DATE AS ${_asPrefix}INPUT_DATE, ${_alias}CHG_DUTY_ID AS ${_asPrefix}CHG_DUTY_ID, ${_alias}CHG_DATE AS ${_asPrefix}CHG_DATE, ${_alias}CUST_CODE AS ${_asPrefix}CUST_CODE, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP        </when>
        <otherwise>
            ${_alias}DEPOSIT_NO, ${_alias}COMPANY_CODE, ${_alias}BANK_CODE, ${_alias}ACNT_CODE, ${_alias}DEPOSIT_NAME, ${_alias}USE_YN, ${_alias}PAY_YN, ${_alias}DEPOSIT_TRANS_YN, ${_alias}DEPOSIT_LIMIT_AMT, ${_alias}CONTRACT_DATE, ${_alias}EXPIRE_DATE, ${_alias}ANNUL_DATE, ${_alias}BOND_NO, ${_alias}CAP_AMT, ${_alias}CONTRACT_AMT, ${_alias}INT_AMT, ${_alias}CORP_RATE, ${_alias}PAY_AMT, ${_alias}PAY_DATE, ${_alias}PRINT_YN, ${_alias}DEPOSIT_DIV, ${_alias}ACNT_CODE_INT, ${_alias}SECURITY_NO, ${_alias}SECURITY_SEQ, ${_alias}INPUT_DUTY_ID, ${_alias}INPUT_DATE, ${_alias}CHG_DUTY_ID, ${_alias}CHG_DATE, ${_alias}CUST_CODE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}BANK_CODE AS ${_asPrefix}BANK_CODE, ${_alias}ACNT_CODE AS ${_asPrefix}ACNT_CODE, ${_alias}DEPOSIT_NAME AS ${_asPrefix}DEPOSIT_NAME, ${_alias}USE_YN AS ${_asPrefix}USE_YN, ${_alias}PAY_YN AS ${_asPrefix}PAY_YN, ${_alias}DEPOSIT_TRANS_YN AS ${_asPrefix}DEPOSIT_TRANS_YN, ${_alias}DEPOSIT_LIMIT_AMT AS ${_asPrefix}DEPOSIT_LIMIT_AMT, ${_alias}CONTRACT_DATE AS ${_asPrefix}CONTRACT_DATE, ${_alias}EXPIRE_DATE AS ${_asPrefix}EXPIRE_DATE, ${_alias}ANNUL_DATE AS ${_asPrefix}ANNUL_DATE, ${_alias}BOND_NO AS ${_asPrefix}BOND_NO, ${_alias}CAP_AMT AS ${_asPrefix}CAP_AMT, ${_alias}CONTRACT_AMT AS ${_asPrefix}CONTRACT_AMT, ${_alias}INT_AMT AS ${_asPrefix}INT_AMT, ${_alias}CORP_RATE AS ${_asPrefix}CORP_RATE, ${_alias}PAY_AMT AS ${_asPrefix}PAY_AMT, ${_alias}PAY_DATE AS ${_asPrefix}PAY_DATE, ${_alias}PRINT_YN AS ${_asPrefix}PRINT_YN, ${_alias}DEPOSIT_DIV AS ${_asPrefix}DEPOSIT_DIV, ${_alias}ACNT_CODE_INT AS ${_asPrefix}ACNT_CODE_INT, ${_alias}SECURITY_NO AS ${_asPrefix}SECURITY_NO, ${_alias}SECURITY_SEQ AS ${_asPrefix}SECURITY_SEQ, ${_alias}INPUT_DUTY_ID AS ${_asPrefix}INPUT_DUTY_ID, ${_alias}INPUT_DATE AS ${_asPrefix}INPUT_DATE, ${_alias}CHG_DUTY_ID AS ${_asPrefix}CHG_DUTY_ID, ${_alias}CHG_DATE AS ${_asPrefix}CHG_DATE, ${_alias}CUST_CODE AS ${_asPrefix}CUST_CODE, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP        </when>
        <otherwise>
            ${_alias}BANK_CODE, ${_alias}ACNT_CODE, ${_alias}DEPOSIT_NAME, ${_alias}USE_YN, ${_alias}PAY_YN, ${_alias}DEPOSIT_TRANS_YN, ${_alias}DEPOSIT_LIMIT_AMT, ${_alias}CONTRACT_DATE, ${_alias}EXPIRE_DATE, ${_alias}ANNUL_DATE, ${_alias}BOND_NO, ${_alias}CAP_AMT, ${_alias}CONTRACT_AMT, ${_alias}INT_AMT, ${_alias}CORP_RATE, ${_alias}PAY_AMT, ${_alias}PAY_DATE, ${_alias}PRINT_YN, ${_alias}DEPOSIT_DIV, ${_alias}ACNT_CODE_INT, ${_alias}SECURITY_NO, ${_alias}SECURITY_SEQ, ${_alias}INPUT_DUTY_ID, ${_alias}INPUT_DATE, ${_alias}CHG_DUTY_ID, ${_alias}CHG_DATE, ${_alias}CUST_CODE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}DEPOSIT_NO, ${_alias}COMPANY_CODE, ${_alias}BANK_CODE, ${_alias}ACNT_CODE, ${_alias}DEPOSIT_NAME, ${_alias}USE_YN, ${_alias}PAY_YN, ${_alias}DEPOSIT_TRANS_YN, ${_alias}DEPOSIT_LIMIT_AMT, ${_alias}CONTRACT_DATE, ${_alias}EXPIRE_DATE, ${_alias}ANNUL_DATE, ${_alias}BOND_NO, ${_alias}CAP_AMT, ${_alias}CONTRACT_AMT, ${_alias}INT_AMT, ${_alias}CORP_RATE, ${_alias}PAY_AMT, ${_alias}PAY_DATE, ${_alias}PRINT_YN, ${_alias}DEPOSIT_DIV, ${_alias}ACNT_CODE_INT, ${_alias}SECURITY_NO, ${_alias}SECURITY_SEQ, ${_alias}INPUT_DUTY_ID, ${_alias}INPUT_DATE, ${_alias}CHG_DUTY_ID, ${_alias}CHG_DATE, ${_alias}CUST_CODE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}BANK_CODE, ${_alias}ACNT_CODE, ${_alias}DEPOSIT_NAME, ${_alias}USE_YN, ${_alias}PAY_YN, ${_alias}DEPOSIT_TRANS_YN, ${_alias}DEPOSIT_LIMIT_AMT, ${_alias}CONTRACT_DATE, ${_alias}EXPIRE_DATE, ${_alias}ANNUL_DATE, ${_alias}BOND_NO, ${_alias}CAP_AMT, ${_alias}CONTRACT_AMT, ${_alias}INT_AMT, ${_alias}CORP_RATE, ${_alias}PAY_AMT, ${_alias}PAY_DATE, ${_alias}PRINT_YN, ${_alias}DEPOSIT_DIV, ${_alias}ACNT_CODE_INT, ${_alias}SECURITY_NO, ${_alias}SECURITY_SEQ, ${_alias}INPUT_DUTY_ID, ${_alias}INPUT_DATE, ${_alias}CHG_DUTY_ID, ${_alias}CHG_DATE, ${_alias}CUST_CODE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP    </sql>

    <select id="simpleGetAmCodeDeposit" parameterType="long" resultMap="simpleAmCodeDepositResult_">
        /* com.neofect.gts.core.services.am.repository.AmCodeDepositRepository_.simpleGetAmCodeDeposit */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.AM_CODE_DEPOSIT
        WHERE
        DEPOSIT_NO = #{depositNo}
        AND COMPANY_CODE = #{companyCode}
	</select>

    <select id="simpleListAmCodeDepositCnt" resultType="int">
        /* com.neofect.gts.core.services.am.repository.AmCodeDepositRepository_.simpleListAmCodeDepositCnt */

        SELECT COUNT(*)
        FROM GTS2016.AM_CODE_DEPOSIT
        <include refid="simpleAmCodeDepositCondition_" />
    </select>

    <select id="simpleListAmCodeDeposit" resultMap="simpleAmCodeDepositResult_">
        /* com.neofect.gts.core.services.am.repository.AmCodeDepositRepository_.simpleListAmCodeDeposit */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.AM_CODE_DEPOSIT
        <include refid="simpleAmCodeDepositCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="bankCode != null and bankCode != ''">
            ${_alias}BANK_CODE = #{bankCode},
        </if>
        <if test="acntCode != null and acntCode != ''">
            ${_alias}ACNT_CODE = #{acntCode},
        </if>
        <if test="depositName != null and depositName != ''">
            ${_alias}DEPOSIT_NAME = #{depositName},
        </if>
        <if test="useYn != null and useYn != ''">
            ${_alias}USE_YN = #{useYn},
        </if>
        <if test="payYn != null and payYn != ''">
            ${_alias}PAY_YN = #{payYn},
        </if>
        <if test="depositTransYn != null and depositTransYn != ''">
            ${_alias}DEPOSIT_TRANS_YN = #{depositTransYn},
        </if>
        <if test="depositLimitAmt != null">
            ${_alias}DEPOSIT_LIMIT_AMT = #{depositLimitAmt},
        </if>
        <if test="contractDate != null and contractDate != ''">
            ${_alias}CONTRACT_DATE = #{contractDate},
        </if>
        <if test="expireDate != null and expireDate != ''">
            ${_alias}EXPIRE_DATE = #{expireDate},
        </if>
        <if test="annulDate != null and annulDate != ''">
            ${_alias}ANNUL_DATE = #{annulDate},
        </if>
        <if test="bondNo != null and bondNo != ''">
            ${_alias}BOND_NO = #{bondNo},
        </if>
        <if test="capAmt != null">
            ${_alias}CAP_AMT = #{capAmt},
        </if>
        <if test="contractAmt != null">
            ${_alias}CONTRACT_AMT = #{contractAmt},
        </if>
        <if test="intAmt != null">
            ${_alias}INT_AMT = #{intAmt},
        </if>
        <if test="corpRate != null">
            ${_alias}CORP_RATE = #{corpRate},
        </if>
        <if test="payAmt != null">
            ${_alias}PAY_AMT = #{payAmt},
        </if>
        <if test="payDate != null and payDate != ''">
            ${_alias}PAY_DATE = #{payDate},
        </if>
        <if test="printYn != null and printYn != ''">
            ${_alias}PRINT_YN = #{printYn},
        </if>
        <if test="depositDiv != null and depositDiv != ''">
            ${_alias}DEPOSIT_DIV = #{depositDiv},
        </if>
        <if test="acntCodeInt != null and acntCodeInt != ''">
            ${_alias}ACNT_CODE_INT = #{acntCodeInt},
        </if>
        <if test="securityNo != null">
            ${_alias}SECURITY_NO = #{securityNo},
        </if>
        <if test="securitySeq != null">
            ${_alias}SECURITY_SEQ = #{securitySeq},
        </if>
        <if test="inputDutyId != null and inputDutyId != ''">
            ${_alias}INPUT_DUTY_ID = #{inputDutyId},
        </if>
        <if test="inputDate != null and inputDate != ''">
            ${_alias}INPUT_DATE = #{inputDate},
        </if>
        <if test="chgDutyId != null and chgDutyId != ''">
            ${_alias}CHG_DUTY_ID = #{chgDutyId},
        </if>
        <if test="chgDate != null and chgDate != ''">
            ${_alias}CHG_DATE = #{chgDate},
        </if>
        <if test="custCode != null and custCode != ''">
            ${_alias}CUST_CODE = #{custCode},
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo},
        </if>
        <if test="rowInputDate != null">
            ${_alias}ROW_INPUT_DATE = #{rowInputDate},
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            ${_alias}ROW_INPUT_IP = #{rowInputIp},
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo},
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate},
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            ${_alias}ROW_UPDATE_IP = #{rowUpdateIp},
        </if>
    </sql>

    <update id="updateAmCodeDeposit" parameterType="com.neofect.gts.core.services.am.domain.AmCodeDeposit">
        /* com.neofect.gts.core.services.am.repository.AmCodeDepositRepository_.updateAmCodeDeposit */

        UPDATE GTS2016.AM_CODE_DEPOSIT
        SET
             BANK_CODE = #{bankCode}
            , ACNT_CODE = #{acntCode}
            , DEPOSIT_NAME = #{depositName}
            , USE_YN = #{useYn}
            , PAY_YN = #{payYn}
            , DEPOSIT_TRANS_YN = #{depositTransYn}
            , DEPOSIT_LIMIT_AMT = #{depositLimitAmt}
            , CONTRACT_DATE = #{contractDate}
            , EXPIRE_DATE = #{expireDate}
            , ANNUL_DATE = #{annulDate}
            , BOND_NO = #{bondNo}
            , CAP_AMT = #{capAmt}
            , CONTRACT_AMT = #{contractAmt}
            , INT_AMT = #{intAmt}
            , CORP_RATE = #{corpRate}
            , PAY_AMT = #{payAmt}
            , PAY_DATE = #{payDate}
            , PRINT_YN = #{printYn}
            , DEPOSIT_DIV = #{depositDiv}
            , ACNT_CODE_INT = #{acntCodeInt}
            , SECURITY_NO = #{securityNo}
            , SECURITY_SEQ = #{securitySeq}
            , INPUT_DUTY_ID = #{inputDutyId}
            , INPUT_DATE = #{inputDate}
            , CHG_DUTY_ID = #{chgDutyId}
            , CHG_DATE = #{chgDate}
            , CUST_CODE = #{custCode}
            , ROW_INPUT_EMP_NO = #{rowInputEmpNo}
            , ROW_INPUT_DATE = #{rowInputDate}
            , ROW_INPUT_IP = #{rowInputIp}
            , ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
            , ROW_UPDATE_DATE = #{rowUpdateDate}
            , ROW_UPDATE_IP = #{rowUpdateIp}
        WHERE
            DEPOSIT_NO = #{depositNo}
            AND COMPANY_CODE = #{companyCode}
    </update>

    <update id="updateAmCodeDepositDynamic" parameterType="com.neofect.gts.core.services.am.domain.AmCodeDeposit">
        /* com.neofect.gts.core.services.am.repository.AmCodeDepositRepository_.updateAmCodeDepositDynamic */

        UPDATE GTS2016.AM_CODE_DEPOSIT
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            DEPOSIT_NO = #{depositNo}
            AND COMPANY_CODE = #{companyCode}
    </update>

    <delete id="deleteAmCodeDeposit" parameterType="long">
        /* com.neofect.gts.core.services.am.repository.AmCodeDepositRepository_.deleteAmCodeDeposit */

        DELETE FROM GTS2016.AM_CODE_DEPOSIT
        WHERE
            DEPOSIT_NO = #{depositNo}
            AND COMPANY_CODE = #{companyCode}
    </delete>

    <sql id="insert_values_">

        #{bankCode},
        #{acntCode},
        #{depositName},
        #{useYn},
        #{payYn},
        #{depositTransYn},
        #{depositLimitAmt},
        #{contractDate},
        #{expireDate},
        #{annulDate},
        #{bondNo},
        #{capAmt},
        #{contractAmt},
        #{intAmt},
        #{corpRate},
        #{payAmt},
        #{payDate},
        #{printYn},
        #{depositDiv},
        #{acntCodeInt},
        #{securityNo},
        #{securitySeq},
        #{inputDutyId},
        #{inputDate},
        #{chgDutyId},
        #{chgDate},
        #{custCode},
        #{rowInputEmpNo},
        #{rowInputDate},
        #{rowInputIp},
        #{rowUpdateEmpNo},
        #{rowUpdateDate},
        #{rowUpdateIp}
    </sql>

    <insert id="insertAmCodeDeposit">
        /* com.neofect.gts.core.services.am.repository.AmCodeDepositRepository_.insertAmCodeDeposit */


        INSERT INTO GTS2016.AM_CODE_DEPOSIT
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

