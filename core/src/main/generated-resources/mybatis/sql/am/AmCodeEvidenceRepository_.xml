<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.am.repository.AmCodeEvidenceRepository_">

    <resultMap id="simpleAmCodeEvidenceResult_" type="com.neofect.gts.core.services.am.domain.AmCodeEvidence">
        <!-- 증빙코드 -->
        <id     property="id" column="EVIDENCE_CODE"/>
        <!-- 증빙명칭 -->
        <result property="evidenceName" column="EVIDENCE_NAME"/>
        <!-- 증빙종류 -->
        <result property="evidenceKind" column="EVIDENCE_KIND"/>
        <!-- 매출매입구분 -->
        <result property="salesDiv" column="SALES_DIV"/>
        <!-- 과세분류구분 -->
        <result property="evidenceDiv" column="EVIDENCE_DIV"/>
        <!-- 세액발생여부 -->
        <result property="vatYn" column="VAT_YN"/>
        <!-- 공급가+세액여부 -->
        <result property="vatAddYn" column="VAT_ADD_YN"/>
        <!-- 회사세무차대구분 -->
        <result property="taxCompDrcr" column="TAX_COMP_DRCR"/>
        <!-- 회사세무필수여부 -->
        <result property="taxCompYn" column="TAX_COMP_YN"/>
        <!-- 거래처차대구분 -->
        <result property="custDrcr" column="CUST_DRCR"/>
        <!-- 거래처필수여부 -->
        <result property="custYn" column="CUST_YN"/>
        <!-- 사용여부 -->
        <result property="useYn" column="USE_YN"/>
        <!-- 입력담당 -->
        <result property="inputDutyId" column="INPUT_DUTY_ID"/>
        <!-- 입력일시 -->
        <result property="inputDate" column="INPUT_DATE"/>
        <!-- 변경담당 -->
        <result property="chgDutyId" column="CHG_DUTY_ID"/>
        <!-- 변경일시 -->
        <result property="chgDate" column="CHG_DATE"/>
        
        <result property="rowInputEmpNo" column="ROW_INPUT_EMP_NO"/>
        
        <result property="rowInputDate" column="ROW_INPUT_DATE"/>
        
        <result property="rowInputIp" column="ROW_INPUT_IP"/>
        
        <result property="rowUpdateEmpNo" column="ROW_UPDATE_EMP_NO"/>
        
        <result property="rowUpdateDate" column="ROW_UPDATE_DATE"/>
        
        <result property="rowUpdateIp" column="ROW_UPDATE_IP"/>
    </resultMap>

    <sql id="simpleAmCodeEvidenceCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="ids != null and !ids.isEmpty()">
            AND ${_alias}EVIDENCE_CODE IN <foreach collection="ids" item="idValue" open="(" close=")" separator=",">#{ idValue }</foreach>
        </if>
        <if test="id != null and id != ''">
            AND ${_alias}EVIDENCE_CODE = #{id}
        </if>
        <if test="evidenceName != null and evidenceName != ''">
            AND ${_alias}EVIDENCE_NAME = #{evidenceName}
        </if>
        <if test="evidenceKind != null and evidenceKind != ''">
            AND ${_alias}EVIDENCE_KIND = #{evidenceKind}
        </if>
        <if test="salesDiv != null and salesDiv != ''">
            AND ${_alias}SALES_DIV = #{salesDiv}
        </if>
        <if test="evidenceDiv != null and evidenceDiv != ''">
            AND ${_alias}EVIDENCE_DIV = #{evidenceDiv}
        </if>
        <if test="vatYn != null and vatYn != ''">
            AND ${_alias}VAT_YN = #{vatYn}
        </if>
        <if test="vatAddYn != null and vatAddYn != ''">
            AND ${_alias}VAT_ADD_YN = #{vatAddYn}
        </if>
        <if test="taxCompDrcr != null and taxCompDrcr != ''">
            AND ${_alias}TAX_COMP_DRCR = #{taxCompDrcr}
        </if>
        <if test="taxCompYn != null and taxCompYn != ''">
            AND ${_alias}TAX_COMP_YN = #{taxCompYn}
        </if>
        <if test="custDrcr != null and custDrcr != ''">
            AND ${_alias}CUST_DRCR = #{custDrcr}
        </if>
        <if test="custYn != null and custYn != ''">
            AND ${_alias}CUST_YN = #{custYn}
        </if>
        <if test="useYn != null and useYn != ''">
            AND ${_alias}USE_YN = #{useYn}
        </if>
        <if test="inputDutyId != null and inputDutyId != ''">
            AND ${_alias}INPUT_DUTY_ID = #{inputDutyId}
        </if>
        <if test="inputDate != null and inputDate != ''">
            AND ${_alias}INPUT_DATE = #{inputDate}
        </if>
        <if test="chgDutyId != null and chgDutyId != ''">
            AND ${_alias}CHG_DUTY_ID = #{chgDutyId}
        </if>
        <if test="chgDate != null and chgDate != ''">
            AND ${_alias}CHG_DATE = #{chgDate}
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            AND ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo}
        </if>
        <if test="rowInputDate != null and rowInputDate.enabled == true">
            <if test="rowInputDate.from != null and rowInputDate.from != ''">
            AND ${_alias}ROW_INPUT_DATE >= TO_DATE(#{rowInputDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowInputDate.to != null and rowInputDate.to != ''">
            AND ${_alias}ROW_INPUT_DATE <![CDATA[ < ]]> TO_DATE(#{rowInputDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            AND ${_alias}ROW_INPUT_IP = #{rowInputIp}
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            AND ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            AND ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate}
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            AND ${_alias}ROW_UPDATE_IP = #{rowUpdateIp}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}EVIDENCE_CODE AS ${_asPrefix}EVIDENCE_CODE, ${_alias}EVIDENCE_NAME AS ${_asPrefix}EVIDENCE_NAME, ${_alias}EVIDENCE_KIND AS ${_asPrefix}EVIDENCE_KIND, ${_alias}SALES_DIV AS ${_asPrefix}SALES_DIV, ${_alias}EVIDENCE_DIV AS ${_asPrefix}EVIDENCE_DIV, ${_alias}VAT_YN AS ${_asPrefix}VAT_YN, ${_alias}VAT_ADD_YN AS ${_asPrefix}VAT_ADD_YN, ${_alias}TAX_COMP_DRCR AS ${_asPrefix}TAX_COMP_DRCR, ${_alias}TAX_COMP_YN AS ${_asPrefix}TAX_COMP_YN, ${_alias}CUST_DRCR AS ${_asPrefix}CUST_DRCR, ${_alias}CUST_YN AS ${_asPrefix}CUST_YN, ${_alias}USE_YN AS ${_asPrefix}USE_YN, ${_alias}INPUT_DUTY_ID AS ${_asPrefix}INPUT_DUTY_ID, ${_alias}INPUT_DATE AS ${_asPrefix}INPUT_DATE, ${_alias}CHG_DUTY_ID AS ${_asPrefix}CHG_DUTY_ID, ${_alias}CHG_DATE AS ${_asPrefix}CHG_DATE, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP        </when>
        <otherwise>
            ${_alias}EVIDENCE_CODE, ${_alias}EVIDENCE_NAME, ${_alias}EVIDENCE_KIND, ${_alias}SALES_DIV, ${_alias}EVIDENCE_DIV, ${_alias}VAT_YN, ${_alias}VAT_ADD_YN, ${_alias}TAX_COMP_DRCR, ${_alias}TAX_COMP_YN, ${_alias}CUST_DRCR, ${_alias}CUST_YN, ${_alias}USE_YN, ${_alias}INPUT_DUTY_ID, ${_alias}INPUT_DATE, ${_alias}CHG_DUTY_ID, ${_alias}CHG_DATE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}EVIDENCE_NAME AS ${_asPrefix}EVIDENCE_NAME, ${_alias}EVIDENCE_KIND AS ${_asPrefix}EVIDENCE_KIND, ${_alias}SALES_DIV AS ${_asPrefix}SALES_DIV, ${_alias}EVIDENCE_DIV AS ${_asPrefix}EVIDENCE_DIV, ${_alias}VAT_YN AS ${_asPrefix}VAT_YN, ${_alias}VAT_ADD_YN AS ${_asPrefix}VAT_ADD_YN, ${_alias}TAX_COMP_DRCR AS ${_asPrefix}TAX_COMP_DRCR, ${_alias}TAX_COMP_YN AS ${_asPrefix}TAX_COMP_YN, ${_alias}CUST_DRCR AS ${_asPrefix}CUST_DRCR, ${_alias}CUST_YN AS ${_asPrefix}CUST_YN, ${_alias}USE_YN AS ${_asPrefix}USE_YN, ${_alias}INPUT_DUTY_ID AS ${_asPrefix}INPUT_DUTY_ID, ${_alias}INPUT_DATE AS ${_asPrefix}INPUT_DATE, ${_alias}CHG_DUTY_ID AS ${_asPrefix}CHG_DUTY_ID, ${_alias}CHG_DATE AS ${_asPrefix}CHG_DATE, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP        </when>
        <otherwise>
            ${_alias}EVIDENCE_NAME, ${_alias}EVIDENCE_KIND, ${_alias}SALES_DIV, ${_alias}EVIDENCE_DIV, ${_alias}VAT_YN, ${_alias}VAT_ADD_YN, ${_alias}TAX_COMP_DRCR, ${_alias}TAX_COMP_YN, ${_alias}CUST_DRCR, ${_alias}CUST_YN, ${_alias}USE_YN, ${_alias}INPUT_DUTY_ID, ${_alias}INPUT_DATE, ${_alias}CHG_DUTY_ID, ${_alias}CHG_DATE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}EVIDENCE_CODE, ${_alias}EVIDENCE_NAME, ${_alias}EVIDENCE_KIND, ${_alias}SALES_DIV, ${_alias}EVIDENCE_DIV, ${_alias}VAT_YN, ${_alias}VAT_ADD_YN, ${_alias}TAX_COMP_DRCR, ${_alias}TAX_COMP_YN, ${_alias}CUST_DRCR, ${_alias}CUST_YN, ${_alias}USE_YN, ${_alias}INPUT_DUTY_ID, ${_alias}INPUT_DATE, ${_alias}CHG_DUTY_ID, ${_alias}CHG_DATE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}EVIDENCE_NAME, ${_alias}EVIDENCE_KIND, ${_alias}SALES_DIV, ${_alias}EVIDENCE_DIV, ${_alias}VAT_YN, ${_alias}VAT_ADD_YN, ${_alias}TAX_COMP_DRCR, ${_alias}TAX_COMP_YN, ${_alias}CUST_DRCR, ${_alias}CUST_YN, ${_alias}USE_YN, ${_alias}INPUT_DUTY_ID, ${_alias}INPUT_DATE, ${_alias}CHG_DUTY_ID, ${_alias}CHG_DATE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP    </sql>

    <select id="simpleGetAmCodeEvidence" parameterType="long" resultMap="simpleAmCodeEvidenceResult_">
        /* com.neofect.gts.core.services.am.repository.AmCodeEvidenceRepository_.simpleGetAmCodeEvidence */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.AM_CODE_EVIDENCE
        WHERE
        EVIDENCE_CODE = #{id}
	</select>

    <select id="simpleListAmCodeEvidenceCnt" resultType="int">
        /* com.neofect.gts.core.services.am.repository.AmCodeEvidenceRepository_.simpleListAmCodeEvidenceCnt */

        SELECT COUNT(*)
        FROM GTS2016.AM_CODE_EVIDENCE
        <include refid="simpleAmCodeEvidenceCondition_" />
    </select>

    <select id="simpleListAmCodeEvidence" resultMap="simpleAmCodeEvidenceResult_">
        /* com.neofect.gts.core.services.am.repository.AmCodeEvidenceRepository_.simpleListAmCodeEvidence */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.AM_CODE_EVIDENCE
        <include refid="simpleAmCodeEvidenceCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="evidenceName != null and evidenceName != ''">
            ${_alias}EVIDENCE_NAME = #{evidenceName},
        </if>
        <if test="evidenceKind != null and evidenceKind != ''">
            ${_alias}EVIDENCE_KIND = #{evidenceKind},
        </if>
        <if test="salesDiv != null and salesDiv != ''">
            ${_alias}SALES_DIV = #{salesDiv},
        </if>
        <if test="evidenceDiv != null and evidenceDiv != ''">
            ${_alias}EVIDENCE_DIV = #{evidenceDiv},
        </if>
        <if test="vatYn != null and vatYn != ''">
            ${_alias}VAT_YN = #{vatYn},
        </if>
        <if test="vatAddYn != null and vatAddYn != ''">
            ${_alias}VAT_ADD_YN = #{vatAddYn},
        </if>
        <if test="taxCompDrcr != null and taxCompDrcr != ''">
            ${_alias}TAX_COMP_DRCR = #{taxCompDrcr},
        </if>
        <if test="taxCompYn != null and taxCompYn != ''">
            ${_alias}TAX_COMP_YN = #{taxCompYn},
        </if>
        <if test="custDrcr != null and custDrcr != ''">
            ${_alias}CUST_DRCR = #{custDrcr},
        </if>
        <if test="custYn != null and custYn != ''">
            ${_alias}CUST_YN = #{custYn},
        </if>
        <if test="useYn != null and useYn != ''">
            ${_alias}USE_YN = #{useYn},
        </if>
        <if test="inputDutyId != null and inputDutyId != ''">
            ${_alias}INPUT_DUTY_ID = #{inputDutyId},
        </if>
        <if test="inputDate != null and inputDate != ''">
            ${_alias}INPUT_DATE = #{inputDate},
        </if>
        <if test="chgDutyId != null and chgDutyId != ''">
            ${_alias}CHG_DUTY_ID = #{chgDutyId},
        </if>
        <if test="chgDate != null and chgDate != ''">
            ${_alias}CHG_DATE = #{chgDate},
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo},
        </if>
        <if test="rowInputDate != null">
            ${_alias}ROW_INPUT_DATE = #{rowInputDate},
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            ${_alias}ROW_INPUT_IP = #{rowInputIp},
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo},
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate},
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            ${_alias}ROW_UPDATE_IP = #{rowUpdateIp},
        </if>
    </sql>

    <update id="updateAmCodeEvidence" parameterType="com.neofect.gts.core.services.am.domain.AmCodeEvidence">
        /* com.neofect.gts.core.services.am.repository.AmCodeEvidenceRepository_.updateAmCodeEvidence */

        UPDATE GTS2016.AM_CODE_EVIDENCE
        SET
             EVIDENCE_NAME = #{evidenceName}
            , EVIDENCE_KIND = #{evidenceKind}
            , SALES_DIV = #{salesDiv}
            , EVIDENCE_DIV = #{evidenceDiv}
            , VAT_YN = #{vatYn}
            , VAT_ADD_YN = #{vatAddYn}
            , TAX_COMP_DRCR = #{taxCompDrcr}
            , TAX_COMP_YN = #{taxCompYn}
            , CUST_DRCR = #{custDrcr}
            , CUST_YN = #{custYn}
            , USE_YN = #{useYn}
            , INPUT_DUTY_ID = #{inputDutyId}
            , INPUT_DATE = #{inputDate}
            , CHG_DUTY_ID = #{chgDutyId}
            , CHG_DATE = #{chgDate}
            , ROW_INPUT_EMP_NO = #{rowInputEmpNo}
            , ROW_INPUT_DATE = #{rowInputDate}
            , ROW_INPUT_IP = #{rowInputIp}
            , ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
            , ROW_UPDATE_DATE = #{rowUpdateDate}
            , ROW_UPDATE_IP = #{rowUpdateIp}
        WHERE
            EVIDENCE_CODE = #{id}
    </update>

    <update id="updateAmCodeEvidenceDynamic" parameterType="com.neofect.gts.core.services.am.domain.AmCodeEvidence">
        /* com.neofect.gts.core.services.am.repository.AmCodeEvidenceRepository_.updateAmCodeEvidenceDynamic */

        UPDATE GTS2016.AM_CODE_EVIDENCE
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            EVIDENCE_CODE = #{id}
    </update>

    <delete id="deleteAmCodeEvidence" parameterType="long">
        /* com.neofect.gts.core.services.am.repository.AmCodeEvidenceRepository_.deleteAmCodeEvidence */

        DELETE FROM GTS2016.AM_CODE_EVIDENCE
        WHERE
            EVIDENCE_CODE = #{id}
    </delete>

    <sql id="insert_values_">

        #{evidenceName},
        #{evidenceKind},
        #{salesDiv},
        #{evidenceDiv},
        #{vatYn},
        #{vatAddYn},
        #{taxCompDrcr},
        #{taxCompYn},
        #{custDrcr},
        #{custYn},
        #{useYn},
        #{inputDutyId},
        #{inputDate},
        #{chgDutyId},
        #{chgDate},
        #{rowInputEmpNo},
        #{rowInputDate},
        #{rowInputIp},
        #{rowUpdateEmpNo},
        #{rowUpdateDate},
        #{rowUpdateIp}
    </sql>

    <insert id="insertAmCodeEvidence">
        /* com.neofect.gts.core.services.am.repository.AmCodeEvidenceRepository_.insertAmCodeEvidence */


        INSERT INTO GTS2016.AM_CODE_EVIDENCE
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

