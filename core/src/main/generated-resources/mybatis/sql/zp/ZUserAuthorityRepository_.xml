<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.zp.repository.ZUserAuthorityRepository_">

    <resultMap id="simpleZUserAuthorityResult_" type="com.neofect.gts.core.services.zp.domain.ZUserAuthority">
        
        <id     property="compcode" column="COMPCODE"/>
        
        <id     property="empno" column="EMPNO"/>
        
        <id     property="pgmcode" column="PGMCODE"/>
        
        <result property="authI" column="AUTH_I"/>
        
        <result property="authR" column="AUTH_R"/>
        
        <result property="authD" column="AUTH_D"/>
        
        <result property="authP" column="AUTH_P"/>
        
        <result property="rowInputEmpNo" column="ROW_INPUT_EMP_NO"/>
        
        <result property="rowInputDate" column="ROW_INPUT_DATE"/>
        
        <result property="rowInputIp" column="ROW_INPUT_IP"/>
        
        <result property="rowUpdateEmpNo" column="ROW_UPDATE_EMP_NO"/>
        
        <result property="rowUpdateDate" column="ROW_UPDATE_DATE"/>
        
        <result property="rowUpdateIp" column="ROW_UPDATE_IP"/>
    </resultMap>

    <sql id="simpleZUserAuthorityCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="compcodes != null and !compcodes.isEmpty()">
            AND ${_alias}COMPCODE IN <foreach collection="compcodes" item="compcodeValue" open="(" close=")" separator=",">#{ compcodeValue }</foreach>
        </if>
        <if test="empnos != null and !empnos.isEmpty()">
            AND ${_alias}EMPNO IN <foreach collection="empnos" item="empnoValue" open="(" close=")" separator=",">#{ empnoValue }</foreach>
        </if>
        <if test="pgmcodes != null and !pgmcodes.isEmpty()">
            AND ${_alias}PGMCODE IN <foreach collection="pgmcodes" item="pgmcodeValue" open="(" close=")" separator=",">#{ pgmcodeValue }</foreach>
        </if>
        <if test="compcode != null and compcode != ''">
            AND ${_alias}COMPCODE = #{compcode}
        </if>
        <if test="empno != null and empno != ''">
            AND ${_alias}EMPNO = #{empno}
        </if>
        <if test="pgmcode != null and pgmcode != ''">
            AND ${_alias}PGMCODE = #{pgmcode}
        </if>
        <if test="authI != null and authI != ''">
            AND ${_alias}AUTH_I = #{authI}
        </if>
        <if test="authR != null and authR != ''">
            AND ${_alias}AUTH_R = #{authR}
        </if>
        <if test="authD != null and authD != ''">
            AND ${_alias}AUTH_D = #{authD}
        </if>
        <if test="authP != null and authP != ''">
            AND ${_alias}AUTH_P = #{authP}
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            AND ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo}
        </if>
        <if test="rowInputDate != null and rowInputDate.enabled == true">
            <if test="rowInputDate.from != null and rowInputDate.from != ''">
            AND ${_alias}ROW_INPUT_DATE >= TO_DATE(#{rowInputDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowInputDate.to != null and rowInputDate.to != ''">
            AND ${_alias}ROW_INPUT_DATE <![CDATA[ < ]]> TO_DATE(#{rowInputDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            AND ${_alias}ROW_INPUT_IP = #{rowInputIp}
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            AND ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            AND ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate}
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            AND ${_alias}ROW_UPDATE_IP = #{rowUpdateIp}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}COMPCODE AS ${_asPrefix}COMPCODE, ${_alias}EMPNO AS ${_asPrefix}EMPNO, ${_alias}PGMCODE AS ${_asPrefix}PGMCODE, ${_alias}AUTH_I AS ${_asPrefix}AUTH_I, ${_alias}AUTH_R AS ${_asPrefix}AUTH_R, ${_alias}AUTH_D AS ${_asPrefix}AUTH_D, ${_alias}AUTH_P AS ${_asPrefix}AUTH_P, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP        </when>
        <otherwise>
            ${_alias}COMPCODE, ${_alias}EMPNO, ${_alias}PGMCODE, ${_alias}AUTH_I, ${_alias}AUTH_R, ${_alias}AUTH_D, ${_alias}AUTH_P, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}AUTH_I AS ${_asPrefix}AUTH_I, ${_alias}AUTH_R AS ${_asPrefix}AUTH_R, ${_alias}AUTH_D AS ${_asPrefix}AUTH_D, ${_alias}AUTH_P AS ${_asPrefix}AUTH_P, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP        </when>
        <otherwise>
            ${_alias}AUTH_I, ${_alias}AUTH_R, ${_alias}AUTH_D, ${_alias}AUTH_P, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}COMPCODE, ${_alias}EMPNO, ${_alias}PGMCODE, ${_alias}AUTH_I, ${_alias}AUTH_R, ${_alias}AUTH_D, ${_alias}AUTH_P, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}AUTH_I, ${_alias}AUTH_R, ${_alias}AUTH_D, ${_alias}AUTH_P, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP    </sql>

    <select id="simpleGetZUserAuthority" parameterType="long" resultMap="simpleZUserAuthorityResult_">
        /* com.neofect.gts.core.services.zp.repository.ZUserAuthorityRepository_.simpleGetZUserAuthority */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.Z_USER_AUTHORITY
        WHERE
        COMPCODE = #{compcode}
        AND EMPNO = #{empno}
        AND PGMCODE = #{pgmcode}
	</select>

    <select id="simpleListZUserAuthorityCnt" resultType="int">
        /* com.neofect.gts.core.services.zp.repository.ZUserAuthorityRepository_.simpleListZUserAuthorityCnt */

        SELECT COUNT(*)
        FROM GTS2016.Z_USER_AUTHORITY
        <include refid="simpleZUserAuthorityCondition_" />
    </select>

    <select id="simpleListZUserAuthority" resultMap="simpleZUserAuthorityResult_">
        /* com.neofect.gts.core.services.zp.repository.ZUserAuthorityRepository_.simpleListZUserAuthority */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.Z_USER_AUTHORITY
        <include refid="simpleZUserAuthorityCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="authI != null and authI != ''">
            ${_alias}AUTH_I = #{authI},
        </if>
        <if test="authR != null and authR != ''">
            ${_alias}AUTH_R = #{authR},
        </if>
        <if test="authD != null and authD != ''">
            ${_alias}AUTH_D = #{authD},
        </if>
        <if test="authP != null and authP != ''">
            ${_alias}AUTH_P = #{authP},
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo},
        </if>
        <if test="rowInputDate != null">
            ${_alias}ROW_INPUT_DATE = #{rowInputDate},
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            ${_alias}ROW_INPUT_IP = #{rowInputIp},
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo},
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate},
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            ${_alias}ROW_UPDATE_IP = #{rowUpdateIp},
        </if>
    </sql>

    <update id="updateZUserAuthority" parameterType="com.neofect.gts.core.services.zp.domain.ZUserAuthority">
        /* com.neofect.gts.core.services.zp.repository.ZUserAuthorityRepository_.updateZUserAuthority */

        UPDATE GTS2016.Z_USER_AUTHORITY
        SET
             AUTH_I = #{authI}
            , AUTH_R = #{authR}
            , AUTH_D = #{authD}
            , AUTH_P = #{authP}
            , ROW_INPUT_EMP_NO = #{rowInputEmpNo}
            , ROW_INPUT_DATE = #{rowInputDate}
            , ROW_INPUT_IP = #{rowInputIp}
            , ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
            , ROW_UPDATE_DATE = #{rowUpdateDate}
            , ROW_UPDATE_IP = #{rowUpdateIp}
        WHERE
            COMPCODE = #{compcode}
            AND EMPNO = #{empno}
            AND PGMCODE = #{pgmcode}
    </update>

    <update id="updateZUserAuthorityDynamic" parameterType="com.neofect.gts.core.services.zp.domain.ZUserAuthority">
        /* com.neofect.gts.core.services.zp.repository.ZUserAuthorityRepository_.updateZUserAuthorityDynamic */

        UPDATE GTS2016.Z_USER_AUTHORITY
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            COMPCODE = #{compcode}
            AND EMPNO = #{empno}
            AND PGMCODE = #{pgmcode}
    </update>

    <delete id="deleteZUserAuthority" parameterType="long">
        /* com.neofect.gts.core.services.zp.repository.ZUserAuthorityRepository_.deleteZUserAuthority */

        DELETE FROM GTS2016.Z_USER_AUTHORITY
        WHERE
            COMPCODE = #{compcode}
            AND EMPNO = #{empno}
            AND PGMCODE = #{pgmcode}
    </delete>

    <sql id="insert_values_">

        #{authI},
        #{authR},
        #{authD},
        #{authP},
        #{rowInputEmpNo},
        #{rowInputDate},
        #{rowInputIp},
        #{rowUpdateEmpNo},
        #{rowUpdateDate},
        #{rowUpdateIp}
    </sql>

    <insert id="insertZUserAuthority">
        /* com.neofect.gts.core.services.zp.repository.ZUserAuthorityRepository_.insertZUserAuthority */


        INSERT INTO GTS2016.Z_USER_AUTHORITY
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

