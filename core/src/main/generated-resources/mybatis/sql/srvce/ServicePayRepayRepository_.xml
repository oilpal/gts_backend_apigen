<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.srvce.repository.ServicePayRepayRepository_">

    <resultMap id="simpleServicePayRepayResult_" type="com.neofect.gts.core.services.srvce.domain.ServicePayRepay">
        <!-- 지사ID -->
        <id     property="deptId" column="DEPT_ID"/>
        <!-- 고객ID -->
        <id     property="custId" column="CUST_ID"/>
        <!-- 집계년월 -->
        <id     property="yyyymm" column="YYYYMM"/>
        <!-- 지불일자 -->
        <id     property="payDate" column="PAY_DATE"/>
        <!-- 지불금액 -->
        <result property="payAmt" column="PAY_AMT"/>
        <!-- 현금결재 -->
        <result property="cashAmt" column="CASH_AMT"/>
        <!-- 카드결재 -->
        <result property="cardAmt" column="CARD_AMT"/>
        <!-- 구청청구금 -->
        <result property="reqAmt" column="REQ_AMT"/>
        <!-- 입력자 -->
        <result property="enterId" column="ENTER_ID"/>
        <!-- 입력일자 -->
        <result property="enterDate" column="ENTER_DATE"/>
        <!-- 수정자 -->
        <result property="editId" column="EDIT_ID"/>
        <!-- 수정일자 -->
        <result property="editDate" column="EDIT_DATE"/>
        <!-- 적요 -->
        <result property="remark" column="REMARK"/>
        <!-- 무통장결재 -->
        <result property="bankAmt" column="BANK_AMT"/>
        <!-- 카드결재 -->
        <result property="depositno" column="DEPOSITNO"/>
        
        <result property="rowInputEmpNo" column="ROW_INPUT_EMP_NO"/>
        
        <result property="rowInputDate" column="ROW_INPUT_DATE"/>
        
        <result property="rowInputIp" column="ROW_INPUT_IP"/>
        
        <result property="rowUpdateEmpNo" column="ROW_UPDATE_EMP_NO"/>
        
        <result property="rowUpdateDate" column="ROW_UPDATE_DATE"/>
        
        <result property="rowUpdateIp" column="ROW_UPDATE_IP"/>
    </resultMap>

    <sql id="simpleServicePayRepayCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="deptIds != null and !deptIds.isEmpty()">
            AND ${_alias}DEPT_ID IN <foreach collection="deptIds" item="deptIdValue" open="(" close=")" separator=",">#{ deptIdValue }</foreach>
        </if>
        <if test="custIds != null and !custIds.isEmpty()">
            AND ${_alias}CUST_ID IN <foreach collection="custIds" item="custIdValue" open="(" close=")" separator=",">#{ custIdValue }</foreach>
        </if>
        <if test="yyyymms != null and !yyyymms.isEmpty()">
            AND ${_alias}YYYYMM IN <foreach collection="yyyymms" item="yyyymmValue" open="(" close=")" separator=",">#{ yyyymmValue }</foreach>
        </if>
        <if test="payDates != null and !payDates.isEmpty()">
            AND ${_alias}PAY_DATE IN <foreach collection="payDates" item="payDateValue" open="(" close=")" separator=",">#{ payDateValue }</foreach>
        </if>
        <if test="deptId != null and deptId != ''">
            AND ${_alias}DEPT_ID = #{deptId}
        </if>
        <if test="custId != null">
            AND ${_alias}CUST_ID = #{custId}
        </if>
        <if test="yyyymm != null and yyyymm != ''">
            AND ${_alias}YYYYMM = #{yyyymm}
        </if>
        <if test="payDate != null and payDate.enabled == true">
            <if test="payDate.from != null and payDate.from != ''">
            AND ${_alias}PAY_DATE >= TO_DATE(#{payDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="payDate.to != null and payDate.to != ''">
            AND ${_alias}PAY_DATE <![CDATA[ < ]]> TO_DATE(#{payDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="payAmt != null">
            AND ${_alias}PAY_AMT = #{payAmt}
        </if>
        <if test="cashAmt != null">
            AND ${_alias}CASH_AMT = #{cashAmt}
        </if>
        <if test="cardAmt != null">
            AND ${_alias}CARD_AMT = #{cardAmt}
        </if>
        <if test="reqAmt != null">
            AND ${_alias}REQ_AMT = #{reqAmt}
        </if>
        <if test="enterId != null">
            AND ${_alias}ENTER_ID = #{enterId}
        </if>
        <if test="enterDate != null and enterDate.enabled == true">
            <if test="enterDate.from != null and enterDate.from != ''">
            AND ${_alias}ENTER_DATE >= TO_DATE(#{enterDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="enterDate.to != null and enterDate.to != ''">
            AND ${_alias}ENTER_DATE <![CDATA[ < ]]> TO_DATE(#{enterDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="editId != null">
            AND ${_alias}EDIT_ID = #{editId}
        </if>
        <if test="editDate != null and editDate.enabled == true">
            <if test="editDate.from != null and editDate.from != ''">
            AND ${_alias}EDIT_DATE >= TO_DATE(#{editDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="editDate.to != null and editDate.to != ''">
            AND ${_alias}EDIT_DATE <![CDATA[ < ]]> TO_DATE(#{editDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="remark != null and remark != ''">
            AND ${_alias}REMARK = #{remark}
        </if>
        <if test="bankAmt != null">
            AND ${_alias}BANK_AMT = #{bankAmt}
        </if>
        <if test="depositno != null and depositno != ''">
            AND ${_alias}DEPOSITNO = #{depositno}
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            AND ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo}
        </if>
        <if test="rowInputDate != null and rowInputDate.enabled == true">
            <if test="rowInputDate.from != null and rowInputDate.from != ''">
            AND ${_alias}ROW_INPUT_DATE >= TO_DATE(#{rowInputDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowInputDate.to != null and rowInputDate.to != ''">
            AND ${_alias}ROW_INPUT_DATE <![CDATA[ < ]]> TO_DATE(#{rowInputDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            AND ${_alias}ROW_INPUT_IP = #{rowInputIp}
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            AND ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            AND ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate}
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            AND ${_alias}ROW_UPDATE_IP = #{rowUpdateIp}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}DEPT_ID AS ${_asPrefix}DEPT_ID, ${_alias}CUST_ID AS ${_asPrefix}CUST_ID, ${_alias}YYYYMM AS ${_asPrefix}YYYYMM, ${_alias}PAY_DATE AS ${_asPrefix}PAY_DATE, ${_alias}PAY_AMT AS ${_asPrefix}PAY_AMT, ${_alias}CASH_AMT AS ${_asPrefix}CASH_AMT, ${_alias}CARD_AMT AS ${_asPrefix}CARD_AMT, ${_alias}REQ_AMT AS ${_asPrefix}REQ_AMT, ${_alias}ENTER_ID AS ${_asPrefix}ENTER_ID, ${_alias}ENTER_DATE AS ${_asPrefix}ENTER_DATE, ${_alias}EDIT_ID AS ${_asPrefix}EDIT_ID, ${_alias}EDIT_DATE AS ${_asPrefix}EDIT_DATE, ${_alias}REMARK AS ${_asPrefix}REMARK, ${_alias}BANK_AMT AS ${_asPrefix}BANK_AMT, ${_alias}DEPOSITNO AS ${_asPrefix}DEPOSITNO, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP        </when>
        <otherwise>
            ${_alias}DEPT_ID, ${_alias}CUST_ID, ${_alias}YYYYMM, ${_alias}PAY_DATE, ${_alias}PAY_AMT, ${_alias}CASH_AMT, ${_alias}CARD_AMT, ${_alias}REQ_AMT, ${_alias}ENTER_ID, ${_alias}ENTER_DATE, ${_alias}EDIT_ID, ${_alias}EDIT_DATE, ${_alias}REMARK, ${_alias}BANK_AMT, ${_alias}DEPOSITNO, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}PAY_AMT AS ${_asPrefix}PAY_AMT, ${_alias}CASH_AMT AS ${_asPrefix}CASH_AMT, ${_alias}CARD_AMT AS ${_asPrefix}CARD_AMT, ${_alias}REQ_AMT AS ${_asPrefix}REQ_AMT, ${_alias}ENTER_ID AS ${_asPrefix}ENTER_ID, ${_alias}ENTER_DATE AS ${_asPrefix}ENTER_DATE, ${_alias}EDIT_ID AS ${_asPrefix}EDIT_ID, ${_alias}EDIT_DATE AS ${_asPrefix}EDIT_DATE, ${_alias}REMARK AS ${_asPrefix}REMARK, ${_alias}BANK_AMT AS ${_asPrefix}BANK_AMT, ${_alias}DEPOSITNO AS ${_asPrefix}DEPOSITNO, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP        </when>
        <otherwise>
            ${_alias}PAY_AMT, ${_alias}CASH_AMT, ${_alias}CARD_AMT, ${_alias}REQ_AMT, ${_alias}ENTER_ID, ${_alias}ENTER_DATE, ${_alias}EDIT_ID, ${_alias}EDIT_DATE, ${_alias}REMARK, ${_alias}BANK_AMT, ${_alias}DEPOSITNO, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}DEPT_ID, ${_alias}CUST_ID, ${_alias}YYYYMM, ${_alias}PAY_DATE, ${_alias}PAY_AMT, ${_alias}CASH_AMT, ${_alias}CARD_AMT, ${_alias}REQ_AMT, ${_alias}ENTER_ID, ${_alias}ENTER_DATE, ${_alias}EDIT_ID, ${_alias}EDIT_DATE, ${_alias}REMARK, ${_alias}BANK_AMT, ${_alias}DEPOSITNO, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}PAY_AMT, ${_alias}CASH_AMT, ${_alias}CARD_AMT, ${_alias}REQ_AMT, ${_alias}ENTER_ID, ${_alias}ENTER_DATE, ${_alias}EDIT_ID, ${_alias}EDIT_DATE, ${_alias}REMARK, ${_alias}BANK_AMT, ${_alias}DEPOSITNO, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP    </sql>

    <select id="simpleGetServicePayRepay" parameterType="long" resultMap="simpleServicePayRepayResult_">
        /* com.neofect.gts.core.services.srvce.repository.ServicePayRepayRepository_.simpleGetServicePayRepay */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.SERVICE_PAY_REPAY
        WHERE
        DEPT_ID = #{deptId}
        AND CUST_ID = #{custId}
        AND YYYYMM = #{yyyymm}
        AND PAY_DATE = #{payDate}
	</select>

    <select id="simpleListServicePayRepayCnt" resultType="int">
        /* com.neofect.gts.core.services.srvce.repository.ServicePayRepayRepository_.simpleListServicePayRepayCnt */

        SELECT COUNT(*)
        FROM GTS2016.SERVICE_PAY_REPAY
        <include refid="simpleServicePayRepayCondition_" />
    </select>

    <select id="simpleListServicePayRepay" resultMap="simpleServicePayRepayResult_">
        /* com.neofect.gts.core.services.srvce.repository.ServicePayRepayRepository_.simpleListServicePayRepay */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.SERVICE_PAY_REPAY
        <include refid="simpleServicePayRepayCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="payAmt != null">
            ${_alias}PAY_AMT = #{payAmt},
        </if>
        <if test="cashAmt != null">
            ${_alias}CASH_AMT = #{cashAmt},
        </if>
        <if test="cardAmt != null">
            ${_alias}CARD_AMT = #{cardAmt},
        </if>
        <if test="reqAmt != null">
            ${_alias}REQ_AMT = #{reqAmt},
        </if>
        <if test="enterId != null">
            ${_alias}ENTER_ID = #{enterId},
        </if>
        <if test="enterDate != null">
            ${_alias}ENTER_DATE = #{enterDate},
        </if>
        <if test="editId != null">
            ${_alias}EDIT_ID = #{editId},
        </if>
        <if test="editDate != null">
            ${_alias}EDIT_DATE = #{editDate},
        </if>
        <if test="remark != null and remark != ''">
            ${_alias}REMARK = #{remark},
        </if>
        <if test="bankAmt != null">
            ${_alias}BANK_AMT = #{bankAmt},
        </if>
        <if test="depositno != null and depositno != ''">
            ${_alias}DEPOSITNO = #{depositno},
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo},
        </if>
        <if test="rowInputDate != null">
            ${_alias}ROW_INPUT_DATE = #{rowInputDate},
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            ${_alias}ROW_INPUT_IP = #{rowInputIp},
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo},
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate},
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            ${_alias}ROW_UPDATE_IP = #{rowUpdateIp},
        </if>
    </sql>

    <update id="updateServicePayRepay" parameterType="com.neofect.gts.core.services.srvce.domain.ServicePayRepay">
        /* com.neofect.gts.core.services.srvce.repository.ServicePayRepayRepository_.updateServicePayRepay */

        UPDATE GTS2016.SERVICE_PAY_REPAY
        SET
             PAY_AMT = #{payAmt}
            , CASH_AMT = #{cashAmt}
            , CARD_AMT = #{cardAmt}
            , REQ_AMT = #{reqAmt}
            , ENTER_ID = #{enterId}
            , ENTER_DATE = #{enterDate}
            , EDIT_ID = #{editId}
            , EDIT_DATE = #{editDate}
            , REMARK = #{remark}
            , BANK_AMT = #{bankAmt}
            , DEPOSITNO = #{depositno}
            , ROW_INPUT_EMP_NO = #{rowInputEmpNo}
            , ROW_INPUT_DATE = #{rowInputDate}
            , ROW_INPUT_IP = #{rowInputIp}
            , ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
            , ROW_UPDATE_DATE = #{rowUpdateDate}
            , ROW_UPDATE_IP = #{rowUpdateIp}
        WHERE
            DEPT_ID = #{deptId}
            AND CUST_ID = #{custId}
            AND YYYYMM = #{yyyymm}
            AND PAY_DATE = #{payDate}
    </update>

    <update id="updateServicePayRepayDynamic" parameterType="com.neofect.gts.core.services.srvce.domain.ServicePayRepay">
        /* com.neofect.gts.core.services.srvce.repository.ServicePayRepayRepository_.updateServicePayRepayDynamic */

        UPDATE GTS2016.SERVICE_PAY_REPAY
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            DEPT_ID = #{deptId}
            AND CUST_ID = #{custId}
            AND YYYYMM = #{yyyymm}
            AND PAY_DATE = #{payDate}
    </update>

    <delete id="deleteServicePayRepay" parameterType="long">
        /* com.neofect.gts.core.services.srvce.repository.ServicePayRepayRepository_.deleteServicePayRepay */

        DELETE FROM GTS2016.SERVICE_PAY_REPAY
        WHERE
            DEPT_ID = #{deptId}
            AND CUST_ID = #{custId}
            AND YYYYMM = #{yyyymm}
            AND PAY_DATE = #{payDate}
    </delete>

    <sql id="insert_values_">

        #{payAmt},
        #{cashAmt},
        #{cardAmt},
        #{reqAmt},
        #{enterId},
        #{enterDate},
        #{editId},
        #{editDate},
        #{remark},
        #{bankAmt},
        #{depositno},
        #{rowInputEmpNo},
        #{rowInputDate},
        #{rowInputIp},
        #{rowUpdateEmpNo},
        #{rowUpdateDate},
        #{rowUpdateIp}
    </sql>

    <insert id="insertServicePayRepay">
        /* com.neofect.gts.core.services.srvce.repository.ServicePayRepayRepository_.insertServicePayRepay */


        INSERT INTO GTS2016.SERVICE_PAY_REPAY
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

