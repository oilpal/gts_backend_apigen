<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.slip.repository.SlipSimpleRepository_">

    <resultMap id="simpleSlipSimpleResult_" type="com.neofect.gts.core.services.slip.domain.SlipSimple">
        
        <id     property="id" column="SLIP_SEQ"/>
        
        <result property="deptId" column="DEPT_ID"/>
        
        <result property="slipDate" column="SLIP_DATE"/>
        
        <result property="acntCode" column="ACNT_CODE"/>
        
        <result property="slipOutAmt" column="SLIP_OUT_AMT"/>
        
        <result property="slipInAmt" column="SLIP_IN_AMT"/>
        
        <result property="slipCust" column="SLIP_CUST"/>
        
        <result property="custCode" column="CUST_CODE"/>
        
        <result property="slipRemark" column="SLIP_REMARK"/>
        
        <result property="memberId" column="MEMBER_ID"/>
        
        <result property="rowInputEmpNo" column="ROW_INPUT_EMP_NO"/>
        
        <result property="rowInputDate" column="ROW_INPUT_DATE"/>
        
        <result property="rowInputIp" column="ROW_INPUT_IP"/>
        
        <result property="rowUpdateEmpNo" column="ROW_UPDATE_EMP_NO"/>
        
        <result property="rowUpdateDate" column="ROW_UPDATE_DATE"/>
        
        <result property="rowUpdateIp" column="ROW_UPDATE_IP"/>
        
        <result property="enterDiv" column="ENTER_DIV"/>
    </resultMap>

    <sql id="simpleSlipSimpleCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="ids != null and !ids.isEmpty()">
            AND ${_alias}SLIP_SEQ IN <foreach collection="ids" item="idValue" open="(" close=")" separator=",">#{ idValue }</foreach>
        </if>
        <if test="id != null">
            AND ${_alias}SLIP_SEQ = #{id}
        </if>
        <if test="deptId != null and deptId != ''">
            AND ${_alias}DEPT_ID = #{deptId}
        </if>
        <if test="slipDate != null and slipDate != ''">
            AND ${_alias}SLIP_DATE = #{slipDate}
        </if>
        <if test="acntCode != null and acntCode != ''">
            AND ${_alias}ACNT_CODE = #{acntCode}
        </if>
        <if test="slipOutAmt != null">
            AND ${_alias}SLIP_OUT_AMT = #{slipOutAmt}
        </if>
        <if test="slipInAmt != null">
            AND ${_alias}SLIP_IN_AMT = #{slipInAmt}
        </if>
        <if test="slipCust != null and slipCust != ''">
            AND ${_alias}SLIP_CUST = #{slipCust}
        </if>
        <if test="custCode != null and custCode != ''">
            AND ${_alias}CUST_CODE = #{custCode}
        </if>
        <if test="slipRemark != null and slipRemark != ''">
            AND ${_alias}SLIP_REMARK = #{slipRemark}
        </if>
        <if test="memberId != null and memberId != ''">
            AND ${_alias}MEMBER_ID = #{memberId}
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            AND ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo}
        </if>
        <if test="rowInputDate != null and rowInputDate.enabled == true">
            <if test="rowInputDate.from != null and rowInputDate.from != ''">
            AND ${_alias}ROW_INPUT_DATE >= TO_DATE(#{rowInputDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowInputDate.to != null and rowInputDate.to != ''">
            AND ${_alias}ROW_INPUT_DATE <![CDATA[ < ]]> TO_DATE(#{rowInputDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            AND ${_alias}ROW_INPUT_IP = #{rowInputIp}
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            AND ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate.enabled == true">
            <if test="rowUpdateDate.from != null and rowUpdateDate.from != ''">
            AND ${_alias}ROW_UPDATE_DATE >= TO_DATE(#{rowUpdateDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowUpdateDate.to != null and rowUpdateDate.to != ''">
            AND ${_alias}ROW_UPDATE_DATE <![CDATA[ < ]]> TO_DATE(#{rowUpdateDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            AND ${_alias}ROW_UPDATE_IP = #{rowUpdateIp}
        </if>
        <if test="enterDiv != null and enterDiv != ''">
            AND ${_alias}ENTER_DIV = #{enterDiv}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}SLIP_SEQ AS ${_asPrefix}SLIP_SEQ, ${_alias}DEPT_ID AS ${_asPrefix}DEPT_ID, ${_alias}SLIP_DATE AS ${_asPrefix}SLIP_DATE, ${_alias}ACNT_CODE AS ${_asPrefix}ACNT_CODE, ${_alias}SLIP_OUT_AMT AS ${_asPrefix}SLIP_OUT_AMT, ${_alias}SLIP_IN_AMT AS ${_asPrefix}SLIP_IN_AMT, ${_alias}SLIP_CUST AS ${_asPrefix}SLIP_CUST, ${_alias}CUST_CODE AS ${_asPrefix}CUST_CODE, ${_alias}SLIP_REMARK AS ${_asPrefix}SLIP_REMARK, ${_alias}MEMBER_ID AS ${_asPrefix}MEMBER_ID, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}ENTER_DIV AS ${_asPrefix}ENTER_DIV        </when>
        <otherwise>
            ${_alias}SLIP_SEQ, ${_alias}DEPT_ID, ${_alias}SLIP_DATE, ${_alias}ACNT_CODE, ${_alias}SLIP_OUT_AMT, ${_alias}SLIP_IN_AMT, ${_alias}SLIP_CUST, ${_alias}CUST_CODE, ${_alias}SLIP_REMARK, ${_alias}MEMBER_ID, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ENTER_DIV        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}DEPT_ID AS ${_asPrefix}DEPT_ID, ${_alias}SLIP_DATE AS ${_asPrefix}SLIP_DATE, ${_alias}ACNT_CODE AS ${_asPrefix}ACNT_CODE, ${_alias}SLIP_OUT_AMT AS ${_asPrefix}SLIP_OUT_AMT, ${_alias}SLIP_IN_AMT AS ${_asPrefix}SLIP_IN_AMT, ${_alias}SLIP_CUST AS ${_asPrefix}SLIP_CUST, ${_alias}CUST_CODE AS ${_asPrefix}CUST_CODE, ${_alias}SLIP_REMARK AS ${_asPrefix}SLIP_REMARK, ${_alias}MEMBER_ID AS ${_asPrefix}MEMBER_ID, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}ENTER_DIV AS ${_asPrefix}ENTER_DIV        </when>
        <otherwise>
            ${_alias}DEPT_ID, ${_alias}SLIP_DATE, ${_alias}ACNT_CODE, ${_alias}SLIP_OUT_AMT, ${_alias}SLIP_IN_AMT, ${_alias}SLIP_CUST, ${_alias}CUST_CODE, ${_alias}SLIP_REMARK, ${_alias}MEMBER_ID, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ENTER_DIV        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}SLIP_SEQ, ${_alias}DEPT_ID, ${_alias}SLIP_DATE, ${_alias}ACNT_CODE, ${_alias}SLIP_OUT_AMT, ${_alias}SLIP_IN_AMT, ${_alias}SLIP_CUST, ${_alias}CUST_CODE, ${_alias}SLIP_REMARK, ${_alias}MEMBER_ID, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ENTER_DIV    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}DEPT_ID, ${_alias}SLIP_DATE, ${_alias}ACNT_CODE, ${_alias}SLIP_OUT_AMT, ${_alias}SLIP_IN_AMT, ${_alias}SLIP_CUST, ${_alias}CUST_CODE, ${_alias}SLIP_REMARK, ${_alias}MEMBER_ID, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ENTER_DIV    </sql>

    <select id="simpleGetSlipSimple" parameterType="long" resultMap="simpleSlipSimpleResult_">
        /* com.neofect.gts.core.services.slip.repository.SlipSimpleRepository_.simpleGetSlipSimple */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.SLIP_SIMPLE
        WHERE
        SLIP_SEQ = #{id}
	</select>

    <select id="simpleListSlipSimpleCnt" resultType="int">
        /* com.neofect.gts.core.services.slip.repository.SlipSimpleRepository_.simpleListSlipSimpleCnt */

        SELECT COUNT(*)
        FROM GTS2016.SLIP_SIMPLE
        <include refid="simpleSlipSimpleCondition_" />
    </select>

    <select id="simpleListSlipSimple" resultMap="simpleSlipSimpleResult_">
        /* com.neofect.gts.core.services.slip.repository.SlipSimpleRepository_.simpleListSlipSimple */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.SLIP_SIMPLE
        <include refid="simpleSlipSimpleCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="deptId != null and deptId != ''">
            ${_alias}DEPT_ID = #{deptId},
        </if>
        <if test="slipDate != null and slipDate != ''">
            ${_alias}SLIP_DATE = #{slipDate},
        </if>
        <if test="acntCode != null and acntCode != ''">
            ${_alias}ACNT_CODE = #{acntCode},
        </if>
        <if test="slipOutAmt != null">
            ${_alias}SLIP_OUT_AMT = #{slipOutAmt},
        </if>
        <if test="slipInAmt != null">
            ${_alias}SLIP_IN_AMT = #{slipInAmt},
        </if>
        <if test="slipCust != null and slipCust != ''">
            ${_alias}SLIP_CUST = #{slipCust},
        </if>
        <if test="custCode != null and custCode != ''">
            ${_alias}CUST_CODE = #{custCode},
        </if>
        <if test="slipRemark != null and slipRemark != ''">
            ${_alias}SLIP_REMARK = #{slipRemark},
        </if>
        <if test="memberId != null and memberId != ''">
            ${_alias}MEMBER_ID = #{memberId},
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo},
        </if>
        <if test="rowInputDate != null">
            ${_alias}ROW_INPUT_DATE = #{rowInputDate},
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            ${_alias}ROW_INPUT_IP = #{rowInputIp},
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo},
        </if>
        <if test="rowUpdateDate != null">
            ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate},
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            ${_alias}ROW_UPDATE_IP = #{rowUpdateIp},
        </if>
        <if test="enterDiv != null and enterDiv != ''">
            ${_alias}ENTER_DIV = #{enterDiv},
        </if>
    </sql>

    <update id="updateSlipSimple" parameterType="com.neofect.gts.core.services.slip.domain.SlipSimple">
        /* com.neofect.gts.core.services.slip.repository.SlipSimpleRepository_.updateSlipSimple */

        UPDATE GTS2016.SLIP_SIMPLE
        SET
             DEPT_ID = #{deptId}
            , SLIP_DATE = #{slipDate}
            , ACNT_CODE = #{acntCode}
            , SLIP_OUT_AMT = #{slipOutAmt}
            , SLIP_IN_AMT = #{slipInAmt}
            , SLIP_CUST = #{slipCust}
            , CUST_CODE = #{custCode}
            , SLIP_REMARK = #{slipRemark}
            , MEMBER_ID = #{memberId}
            , ROW_INPUT_EMP_NO = #{rowInputEmpNo}
            , ROW_INPUT_DATE = #{rowInputDate}
            , ROW_INPUT_IP = #{rowInputIp}
            , ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
            , ROW_UPDATE_DATE = #{rowUpdateDate}
            , ROW_UPDATE_IP = #{rowUpdateIp}
            , ENTER_DIV = #{enterDiv}
        WHERE
            SLIP_SEQ = #{id}
    </update>

    <update id="updateSlipSimpleDynamic" parameterType="com.neofect.gts.core.services.slip.domain.SlipSimple">
        /* com.neofect.gts.core.services.slip.repository.SlipSimpleRepository_.updateSlipSimpleDynamic */

        UPDATE GTS2016.SLIP_SIMPLE
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            SLIP_SEQ = #{id}
    </update>

    <delete id="deleteSlipSimple" parameterType="long">
        /* com.neofect.gts.core.services.slip.repository.SlipSimpleRepository_.deleteSlipSimple */

        DELETE FROM GTS2016.SLIP_SIMPLE
        WHERE
            SLIP_SEQ = #{id}
    </delete>

    <sql id="insert_values_">

        #{deptId},
        #{slipDate},
        #{acntCode},
        #{slipOutAmt},
        #{slipInAmt},
        #{slipCust},
        #{custCode},
        #{slipRemark},
        #{memberId},
        #{rowInputEmpNo},
        #{rowInputDate},
        #{rowInputIp},
        #{rowUpdateEmpNo},
        #{rowUpdateDate},
        #{rowUpdateIp},
        #{enterDiv}
    </sql>

    <insert id="insertSlipSimple">
        /* com.neofect.gts.core.services.slip.repository.SlipSimpleRepository_.insertSlipSimple */


        INSERT INTO GTS2016.SLIP_SIMPLE
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

