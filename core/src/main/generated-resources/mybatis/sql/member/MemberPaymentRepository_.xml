<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.member.repository.MemberPaymentRepository_">

    <resultMap id="simpleMemberPaymentResult_" type="com.neofect.gts.core.services.member.domain.MemberPayment">
        <!-- 사번 -->
        <id     property="memberId" column="MEMBER_ID"/>
        <!-- 지사코드 -->
        <id     property="deptId" column="DEPT_ID"/>
        <!-- 년월 -->
        <id     property="yyyymm" column="YYYYMM"/>
        <!-- 급여지급일자 -->
        <result property="payDate" column="PAY_DATE"/>
        <!-- 급여은행코드 -->
        <result property="bankDiv" column="BANK_DIV"/>
        <!-- 급여계좌번호 -->
        <result property="depositno" column="DEPOSITNO"/>
        <!-- 부양가족수 -->
        <result property="deductCnt" column="DEDUCT_CNT"/>
        <!-- 나이(만) -->
        <result property="memberAge" column="MEMBER_AGE"/>
        <!-- 나이(만) - 해당월기준(국민연금) -->
        <result property="memberAgeMonth" column="MEMBER_AGE_MONTH"/>
        <!-- 총급여액 -->
        <result property="totalAmt" column="TOTAL_AMT"/>
        <!-- 처우개선비금액 -->
        <result property="totalIncentiveAmt" column="TOTAL_INCENTIVE_AMT"/>
        <!-- 과세금액 -->
        <result property="taxableAmt" column="TAXABLE_AMT"/>
        <!-- 비과세금액 -->
        <result property="nottaxableAmt" column="NOTTAXABLE_AMT"/>
        <!-- 소득세 -->
        <result property="incomeTaxAmt" column="INCOME_TAX_AMT"/>
        <!-- 주민세 -->
        <result property="residenceTaxAmt" column="RESIDENCE_TAX_AMT"/>
        <!-- 국민연금 -->
        <result property="pensionAmt" column="PENSION_AMT"/>
        <!-- 의료보험 -->
        <result property="healthinsureAmt" column="HEALTHINSURE_AMT"/>
        <!-- 장기요양보험 -->
        <result property="longtermAmt" column="LONGTERM_AMT"/>
        <!-- 고용보험 -->
        <result property="employinsureAmt" column="EMPLOYINSURE_AMT"/>
        <!-- 기타공제 -->
        <result property="etcdeductionAmt" column="ETCDEDUCTION_AMT"/>
        <!-- 비고 -->
        <result property="remark" column="REMARK"/>
        
        <result property="rowInputEmpNo" column="ROW_INPUT_EMP_NO"/>
        
        <result property="rowInputDate" column="ROW_INPUT_DATE"/>
        
        <result property="rowInputIp" column="ROW_INPUT_IP"/>
        
        <result property="rowUpdateEmpNo" column="ROW_UPDATE_EMP_NO"/>
        
        <result property="rowUpdateDate" column="ROW_UPDATE_DATE"/>
        
        <result property="rowUpdateIp" column="ROW_UPDATE_IP"/>
        <!-- (회사부담)국민연금 -->
        <result property="cPensionAmt" column="C_PENSION_AMT"/>
        <!-- (회사부담)건강보험 -->
        <result property="cHealthinsureAmt" column="C_HEALTHINSURE_AMT"/>
        <!-- (회사부담)장기요양 -->
        <result property="cLongtermAmt" column="C_LONGTERM_AMT"/>
        <!-- (회사부담)고용보험_고용안정 -->
        <result property="cEmpinsuAmt" column="C_EMPINSU_AMT"/>
        <!-- (회사부담)고용보험_산재보험 -->
        <result property="cIndaccAmt" column="C_INDACC_AMT"/>
        <!-- (회사부담)고용보험_실업급여 -->
        <result property="cEmpinsu2Amt" column="C_EMPINSU2_AMT"/>
        <!-- (회사부담)퇴직급여충당금 -->
        <result property="cRetireAmt" column="C_RETIRE_AMT"/>
        <!-- 총근로시간 -->
        <result property="totalHour" column="TOTAL_HOUR"/>
        <!-- 근무일수 -->
        <result property="workDays" column="WORK_DAYS"/>
    </resultMap>

    <sql id="simpleMemberPaymentCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="memberIds != null and !memberIds.isEmpty()">
            AND ${_alias}MEMBER_ID IN <foreach collection="memberIds" item="memberIdValue" open="(" close=")" separator=",">#{ memberIdValue }</foreach>
        </if>
        <if test="deptIds != null and !deptIds.isEmpty()">
            AND ${_alias}DEPT_ID IN <foreach collection="deptIds" item="deptIdValue" open="(" close=")" separator=",">#{ deptIdValue }</foreach>
        </if>
        <if test="yyyymms != null and !yyyymms.isEmpty()">
            AND ${_alias}YYYYMM IN <foreach collection="yyyymms" item="yyyymmValue" open="(" close=")" separator=",">#{ yyyymmValue }</foreach>
        </if>
        <if test="memberId != null and memberId != ''">
            AND ${_alias}MEMBER_ID = #{memberId}
        </if>
        <if test="deptId != null and deptId != ''">
            AND ${_alias}DEPT_ID = #{deptId}
        </if>
        <if test="yyyymm != null and yyyymm != ''">
            AND ${_alias}YYYYMM = #{yyyymm}
        </if>
        <if test="payDate != null and payDate.enabled == true">
            <if test="payDate.from != null and payDate.from != ''">
            AND ${_alias}PAY_DATE >= TO_DATE(#{payDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="payDate.to != null and payDate.to != ''">
            AND ${_alias}PAY_DATE <![CDATA[ < ]]> TO_DATE(#{payDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="bankDiv != null and bankDiv != ''">
            AND ${_alias}BANK_DIV = #{bankDiv}
        </if>
        <if test="depositno != null and depositno != ''">
            AND ${_alias}DEPOSITNO = #{depositno}
        </if>
        <if test="deductCnt != null">
            AND ${_alias}DEDUCT_CNT = #{deductCnt}
        </if>
        <if test="memberAge != null">
            AND ${_alias}MEMBER_AGE = #{memberAge}
        </if>
        <if test="memberAgeMonth != null">
            AND ${_alias}MEMBER_AGE_MONTH = #{memberAgeMonth}
        </if>
        <if test="totalAmt != null">
            AND ${_alias}TOTAL_AMT = #{totalAmt}
        </if>
        <if test="totalIncentiveAmt != null">
            AND ${_alias}TOTAL_INCENTIVE_AMT = #{totalIncentiveAmt}
        </if>
        <if test="taxableAmt != null">
            AND ${_alias}TAXABLE_AMT = #{taxableAmt}
        </if>
        <if test="nottaxableAmt != null">
            AND ${_alias}NOTTAXABLE_AMT = #{nottaxableAmt}
        </if>
        <if test="incomeTaxAmt != null">
            AND ${_alias}INCOME_TAX_AMT = #{incomeTaxAmt}
        </if>
        <if test="residenceTaxAmt != null">
            AND ${_alias}RESIDENCE_TAX_AMT = #{residenceTaxAmt}
        </if>
        <if test="pensionAmt != null">
            AND ${_alias}PENSION_AMT = #{pensionAmt}
        </if>
        <if test="healthinsureAmt != null">
            AND ${_alias}HEALTHINSURE_AMT = #{healthinsureAmt}
        </if>
        <if test="longtermAmt != null">
            AND ${_alias}LONGTERM_AMT = #{longtermAmt}
        </if>
        <if test="employinsureAmt != null">
            AND ${_alias}EMPLOYINSURE_AMT = #{employinsureAmt}
        </if>
        <if test="etcdeductionAmt != null">
            AND ${_alias}ETCDEDUCTION_AMT = #{etcdeductionAmt}
        </if>
        <if test="remark != null and remark != ''">
            AND ${_alias}REMARK = #{remark}
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            AND ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo}
        </if>
        <if test="rowInputDate != null and rowInputDate.enabled == true">
            <if test="rowInputDate.from != null and rowInputDate.from != ''">
            AND ${_alias}ROW_INPUT_DATE >= TO_DATE(#{rowInputDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowInputDate.to != null and rowInputDate.to != ''">
            AND ${_alias}ROW_INPUT_DATE <![CDATA[ < ]]> TO_DATE(#{rowInputDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            AND ${_alias}ROW_INPUT_IP = #{rowInputIp}
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            AND ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            AND ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate}
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            AND ${_alias}ROW_UPDATE_IP = #{rowUpdateIp}
        </if>
        <if test="cPensionAmt != null">
            AND ${_alias}C_PENSION_AMT = #{cPensionAmt}
        </if>
        <if test="cHealthinsureAmt != null">
            AND ${_alias}C_HEALTHINSURE_AMT = #{cHealthinsureAmt}
        </if>
        <if test="cLongtermAmt != null">
            AND ${_alias}C_LONGTERM_AMT = #{cLongtermAmt}
        </if>
        <if test="cEmpinsuAmt != null">
            AND ${_alias}C_EMPINSU_AMT = #{cEmpinsuAmt}
        </if>
        <if test="cIndaccAmt != null">
            AND ${_alias}C_INDACC_AMT = #{cIndaccAmt}
        </if>
        <if test="cEmpinsu2Amt != null">
            AND ${_alias}C_EMPINSU2_AMT = #{cEmpinsu2Amt}
        </if>
        <if test="cRetireAmt != null">
            AND ${_alias}C_RETIRE_AMT = #{cRetireAmt}
        </if>
        <if test="totalHour != null">
            AND ${_alias}TOTAL_HOUR = #{totalHour}
        </if>
        <if test="workDays != null">
            AND ${_alias}WORK_DAYS = #{workDays}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}MEMBER_ID AS ${_asPrefix}MEMBER_ID, ${_alias}DEPT_ID AS ${_asPrefix}DEPT_ID, ${_alias}YYYYMM AS ${_asPrefix}YYYYMM, ${_alias}PAY_DATE AS ${_asPrefix}PAY_DATE, ${_alias}BANK_DIV AS ${_asPrefix}BANK_DIV, ${_alias}DEPOSITNO AS ${_asPrefix}DEPOSITNO, ${_alias}DEDUCT_CNT AS ${_asPrefix}DEDUCT_CNT, ${_alias}MEMBER_AGE AS ${_asPrefix}MEMBER_AGE, ${_alias}MEMBER_AGE_MONTH AS ${_asPrefix}MEMBER_AGE_MONTH, ${_alias}TOTAL_AMT AS ${_asPrefix}TOTAL_AMT, ${_alias}TOTAL_INCENTIVE_AMT AS ${_asPrefix}TOTAL_INCENTIVE_AMT, ${_alias}TAXABLE_AMT AS ${_asPrefix}TAXABLE_AMT, ${_alias}NOTTAXABLE_AMT AS ${_asPrefix}NOTTAXABLE_AMT, ${_alias}INCOME_TAX_AMT AS ${_asPrefix}INCOME_TAX_AMT, ${_alias}RESIDENCE_TAX_AMT AS ${_asPrefix}RESIDENCE_TAX_AMT, ${_alias}PENSION_AMT AS ${_asPrefix}PENSION_AMT, ${_alias}HEALTHINSURE_AMT AS ${_asPrefix}HEALTHINSURE_AMT, ${_alias}LONGTERM_AMT AS ${_asPrefix}LONGTERM_AMT, ${_alias}EMPLOYINSURE_AMT AS ${_asPrefix}EMPLOYINSURE_AMT, ${_alias}ETCDEDUCTION_AMT AS ${_asPrefix}ETCDEDUCTION_AMT, ${_alias}REMARK AS ${_asPrefix}REMARK, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}C_PENSION_AMT AS ${_asPrefix}C_PENSION_AMT, ${_alias}C_HEALTHINSURE_AMT AS ${_asPrefix}C_HEALTHINSURE_AMT, ${_alias}C_LONGTERM_AMT AS ${_asPrefix}C_LONGTERM_AMT, ${_alias}C_EMPINSU_AMT AS ${_asPrefix}C_EMPINSU_AMT, ${_alias}C_INDACC_AMT AS ${_asPrefix}C_INDACC_AMT, ${_alias}C_EMPINSU2_AMT AS ${_asPrefix}C_EMPINSU2_AMT, ${_alias}C_RETIRE_AMT AS ${_asPrefix}C_RETIRE_AMT, ${_alias}TOTAL_HOUR AS ${_asPrefix}TOTAL_HOUR, ${_alias}WORK_DAYS AS ${_asPrefix}WORK_DAYS        </when>
        <otherwise>
            ${_alias}MEMBER_ID, ${_alias}DEPT_ID, ${_alias}YYYYMM, ${_alias}PAY_DATE, ${_alias}BANK_DIV, ${_alias}DEPOSITNO, ${_alias}DEDUCT_CNT, ${_alias}MEMBER_AGE, ${_alias}MEMBER_AGE_MONTH, ${_alias}TOTAL_AMT, ${_alias}TOTAL_INCENTIVE_AMT, ${_alias}TAXABLE_AMT, ${_alias}NOTTAXABLE_AMT, ${_alias}INCOME_TAX_AMT, ${_alias}RESIDENCE_TAX_AMT, ${_alias}PENSION_AMT, ${_alias}HEALTHINSURE_AMT, ${_alias}LONGTERM_AMT, ${_alias}EMPLOYINSURE_AMT, ${_alias}ETCDEDUCTION_AMT, ${_alias}REMARK, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}C_PENSION_AMT, ${_alias}C_HEALTHINSURE_AMT, ${_alias}C_LONGTERM_AMT, ${_alias}C_EMPINSU_AMT, ${_alias}C_INDACC_AMT, ${_alias}C_EMPINSU2_AMT, ${_alias}C_RETIRE_AMT, ${_alias}TOTAL_HOUR, ${_alias}WORK_DAYS        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}PAY_DATE AS ${_asPrefix}PAY_DATE, ${_alias}BANK_DIV AS ${_asPrefix}BANK_DIV, ${_alias}DEPOSITNO AS ${_asPrefix}DEPOSITNO, ${_alias}DEDUCT_CNT AS ${_asPrefix}DEDUCT_CNT, ${_alias}MEMBER_AGE AS ${_asPrefix}MEMBER_AGE, ${_alias}MEMBER_AGE_MONTH AS ${_asPrefix}MEMBER_AGE_MONTH, ${_alias}TOTAL_AMT AS ${_asPrefix}TOTAL_AMT, ${_alias}TOTAL_INCENTIVE_AMT AS ${_asPrefix}TOTAL_INCENTIVE_AMT, ${_alias}TAXABLE_AMT AS ${_asPrefix}TAXABLE_AMT, ${_alias}NOTTAXABLE_AMT AS ${_asPrefix}NOTTAXABLE_AMT, ${_alias}INCOME_TAX_AMT AS ${_asPrefix}INCOME_TAX_AMT, ${_alias}RESIDENCE_TAX_AMT AS ${_asPrefix}RESIDENCE_TAX_AMT, ${_alias}PENSION_AMT AS ${_asPrefix}PENSION_AMT, ${_alias}HEALTHINSURE_AMT AS ${_asPrefix}HEALTHINSURE_AMT, ${_alias}LONGTERM_AMT AS ${_asPrefix}LONGTERM_AMT, ${_alias}EMPLOYINSURE_AMT AS ${_asPrefix}EMPLOYINSURE_AMT, ${_alias}ETCDEDUCTION_AMT AS ${_asPrefix}ETCDEDUCTION_AMT, ${_alias}REMARK AS ${_asPrefix}REMARK, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}C_PENSION_AMT AS ${_asPrefix}C_PENSION_AMT, ${_alias}C_HEALTHINSURE_AMT AS ${_asPrefix}C_HEALTHINSURE_AMT, ${_alias}C_LONGTERM_AMT AS ${_asPrefix}C_LONGTERM_AMT, ${_alias}C_EMPINSU_AMT AS ${_asPrefix}C_EMPINSU_AMT, ${_alias}C_INDACC_AMT AS ${_asPrefix}C_INDACC_AMT, ${_alias}C_EMPINSU2_AMT AS ${_asPrefix}C_EMPINSU2_AMT, ${_alias}C_RETIRE_AMT AS ${_asPrefix}C_RETIRE_AMT, ${_alias}TOTAL_HOUR AS ${_asPrefix}TOTAL_HOUR, ${_alias}WORK_DAYS AS ${_asPrefix}WORK_DAYS        </when>
        <otherwise>
            ${_alias}PAY_DATE, ${_alias}BANK_DIV, ${_alias}DEPOSITNO, ${_alias}DEDUCT_CNT, ${_alias}MEMBER_AGE, ${_alias}MEMBER_AGE_MONTH, ${_alias}TOTAL_AMT, ${_alias}TOTAL_INCENTIVE_AMT, ${_alias}TAXABLE_AMT, ${_alias}NOTTAXABLE_AMT, ${_alias}INCOME_TAX_AMT, ${_alias}RESIDENCE_TAX_AMT, ${_alias}PENSION_AMT, ${_alias}HEALTHINSURE_AMT, ${_alias}LONGTERM_AMT, ${_alias}EMPLOYINSURE_AMT, ${_alias}ETCDEDUCTION_AMT, ${_alias}REMARK, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}C_PENSION_AMT, ${_alias}C_HEALTHINSURE_AMT, ${_alias}C_LONGTERM_AMT, ${_alias}C_EMPINSU_AMT, ${_alias}C_INDACC_AMT, ${_alias}C_EMPINSU2_AMT, ${_alias}C_RETIRE_AMT, ${_alias}TOTAL_HOUR, ${_alias}WORK_DAYS        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}MEMBER_ID, ${_alias}DEPT_ID, ${_alias}YYYYMM, ${_alias}PAY_DATE, ${_alias}BANK_DIV, ${_alias}DEPOSITNO, ${_alias}DEDUCT_CNT, ${_alias}MEMBER_AGE, ${_alias}MEMBER_AGE_MONTH, ${_alias}TOTAL_AMT, ${_alias}TOTAL_INCENTIVE_AMT, ${_alias}TAXABLE_AMT, ${_alias}NOTTAXABLE_AMT, ${_alias}INCOME_TAX_AMT, ${_alias}RESIDENCE_TAX_AMT, ${_alias}PENSION_AMT, ${_alias}HEALTHINSURE_AMT, ${_alias}LONGTERM_AMT, ${_alias}EMPLOYINSURE_AMT, ${_alias}ETCDEDUCTION_AMT, ${_alias}REMARK, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}C_PENSION_AMT, ${_alias}C_HEALTHINSURE_AMT, ${_alias}C_LONGTERM_AMT, ${_alias}C_EMPINSU_AMT, ${_alias}C_INDACC_AMT, ${_alias}C_EMPINSU2_AMT, ${_alias}C_RETIRE_AMT, ${_alias}TOTAL_HOUR, ${_alias}WORK_DAYS    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}PAY_DATE, ${_alias}BANK_DIV, ${_alias}DEPOSITNO, ${_alias}DEDUCT_CNT, ${_alias}MEMBER_AGE, ${_alias}MEMBER_AGE_MONTH, ${_alias}TOTAL_AMT, ${_alias}TOTAL_INCENTIVE_AMT, ${_alias}TAXABLE_AMT, ${_alias}NOTTAXABLE_AMT, ${_alias}INCOME_TAX_AMT, ${_alias}RESIDENCE_TAX_AMT, ${_alias}PENSION_AMT, ${_alias}HEALTHINSURE_AMT, ${_alias}LONGTERM_AMT, ${_alias}EMPLOYINSURE_AMT, ${_alias}ETCDEDUCTION_AMT, ${_alias}REMARK, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}C_PENSION_AMT, ${_alias}C_HEALTHINSURE_AMT, ${_alias}C_LONGTERM_AMT, ${_alias}C_EMPINSU_AMT, ${_alias}C_INDACC_AMT, ${_alias}C_EMPINSU2_AMT, ${_alias}C_RETIRE_AMT, ${_alias}TOTAL_HOUR, ${_alias}WORK_DAYS    </sql>

    <select id="simpleGetMemberPayment" parameterType="long" resultMap="simpleMemberPaymentResult_">
        /* com.neofect.gts.core.services.member.repository.MemberPaymentRepository_.simpleGetMemberPayment */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.MEMBER_PAYMENT
        WHERE
        MEMBER_ID = #{memberId}
        AND DEPT_ID = #{deptId}
        AND YYYYMM = #{yyyymm}
	</select>

    <select id="simpleListMemberPaymentCnt" resultType="int">
        /* com.neofect.gts.core.services.member.repository.MemberPaymentRepository_.simpleListMemberPaymentCnt */

        SELECT COUNT(*)
        FROM GTS2016.MEMBER_PAYMENT
        <include refid="simpleMemberPaymentCondition_" />
    </select>

    <select id="simpleListMemberPayment" resultMap="simpleMemberPaymentResult_">
        /* com.neofect.gts.core.services.member.repository.MemberPaymentRepository_.simpleListMemberPayment */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.MEMBER_PAYMENT
        <include refid="simpleMemberPaymentCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="payDate != null">
            ${_alias}PAY_DATE = #{payDate},
        </if>
        <if test="bankDiv != null and bankDiv != ''">
            ${_alias}BANK_DIV = #{bankDiv},
        </if>
        <if test="depositno != null and depositno != ''">
            ${_alias}DEPOSITNO = #{depositno},
        </if>
        <if test="deductCnt != null">
            ${_alias}DEDUCT_CNT = #{deductCnt},
        </if>
        <if test="memberAge != null">
            ${_alias}MEMBER_AGE = #{memberAge},
        </if>
        <if test="memberAgeMonth != null">
            ${_alias}MEMBER_AGE_MONTH = #{memberAgeMonth},
        </if>
        <if test="totalAmt != null">
            ${_alias}TOTAL_AMT = #{totalAmt},
        </if>
        <if test="totalIncentiveAmt != null">
            ${_alias}TOTAL_INCENTIVE_AMT = #{totalIncentiveAmt},
        </if>
        <if test="taxableAmt != null">
            ${_alias}TAXABLE_AMT = #{taxableAmt},
        </if>
        <if test="nottaxableAmt != null">
            ${_alias}NOTTAXABLE_AMT = #{nottaxableAmt},
        </if>
        <if test="incomeTaxAmt != null">
            ${_alias}INCOME_TAX_AMT = #{incomeTaxAmt},
        </if>
        <if test="residenceTaxAmt != null">
            ${_alias}RESIDENCE_TAX_AMT = #{residenceTaxAmt},
        </if>
        <if test="pensionAmt != null">
            ${_alias}PENSION_AMT = #{pensionAmt},
        </if>
        <if test="healthinsureAmt != null">
            ${_alias}HEALTHINSURE_AMT = #{healthinsureAmt},
        </if>
        <if test="longtermAmt != null">
            ${_alias}LONGTERM_AMT = #{longtermAmt},
        </if>
        <if test="employinsureAmt != null">
            ${_alias}EMPLOYINSURE_AMT = #{employinsureAmt},
        </if>
        <if test="etcdeductionAmt != null">
            ${_alias}ETCDEDUCTION_AMT = #{etcdeductionAmt},
        </if>
        <if test="remark != null and remark != ''">
            ${_alias}REMARK = #{remark},
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo},
        </if>
        <if test="rowInputDate != null">
            ${_alias}ROW_INPUT_DATE = #{rowInputDate},
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            ${_alias}ROW_INPUT_IP = #{rowInputIp},
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo},
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate != ''">
            ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate},
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            ${_alias}ROW_UPDATE_IP = #{rowUpdateIp},
        </if>
        <if test="cPensionAmt != null">
            ${_alias}C_PENSION_AMT = #{cPensionAmt},
        </if>
        <if test="cHealthinsureAmt != null">
            ${_alias}C_HEALTHINSURE_AMT = #{cHealthinsureAmt},
        </if>
        <if test="cLongtermAmt != null">
            ${_alias}C_LONGTERM_AMT = #{cLongtermAmt},
        </if>
        <if test="cEmpinsuAmt != null">
            ${_alias}C_EMPINSU_AMT = #{cEmpinsuAmt},
        </if>
        <if test="cIndaccAmt != null">
            ${_alias}C_INDACC_AMT = #{cIndaccAmt},
        </if>
        <if test="cEmpinsu2Amt != null">
            ${_alias}C_EMPINSU2_AMT = #{cEmpinsu2Amt},
        </if>
        <if test="cRetireAmt != null">
            ${_alias}C_RETIRE_AMT = #{cRetireAmt},
        </if>
        <if test="totalHour != null">
            ${_alias}TOTAL_HOUR = #{totalHour},
        </if>
        <if test="workDays != null">
            ${_alias}WORK_DAYS = #{workDays},
        </if>
    </sql>

    <update id="updateMemberPayment" parameterType="com.neofect.gts.core.services.member.domain.MemberPayment">
        /* com.neofect.gts.core.services.member.repository.MemberPaymentRepository_.updateMemberPayment */

        UPDATE GTS2016.MEMBER_PAYMENT
        SET
             PAY_DATE = #{payDate}
            , BANK_DIV = #{bankDiv}
            , DEPOSITNO = #{depositno}
            , DEDUCT_CNT = #{deductCnt}
            , MEMBER_AGE = #{memberAge}
            , MEMBER_AGE_MONTH = #{memberAgeMonth}
            , TOTAL_AMT = #{totalAmt}
            , TOTAL_INCENTIVE_AMT = #{totalIncentiveAmt}
            , TAXABLE_AMT = #{taxableAmt}
            , NOTTAXABLE_AMT = #{nottaxableAmt}
            , INCOME_TAX_AMT = #{incomeTaxAmt}
            , RESIDENCE_TAX_AMT = #{residenceTaxAmt}
            , PENSION_AMT = #{pensionAmt}
            , HEALTHINSURE_AMT = #{healthinsureAmt}
            , LONGTERM_AMT = #{longtermAmt}
            , EMPLOYINSURE_AMT = #{employinsureAmt}
            , ETCDEDUCTION_AMT = #{etcdeductionAmt}
            , REMARK = #{remark}
            , ROW_INPUT_EMP_NO = #{rowInputEmpNo}
            , ROW_INPUT_DATE = #{rowInputDate}
            , ROW_INPUT_IP = #{rowInputIp}
            , ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
            , ROW_UPDATE_DATE = #{rowUpdateDate}
            , ROW_UPDATE_IP = #{rowUpdateIp}
            , C_PENSION_AMT = #{cPensionAmt}
            , C_HEALTHINSURE_AMT = #{cHealthinsureAmt}
            , C_LONGTERM_AMT = #{cLongtermAmt}
            , C_EMPINSU_AMT = #{cEmpinsuAmt}
            , C_INDACC_AMT = #{cIndaccAmt}
            , C_EMPINSU2_AMT = #{cEmpinsu2Amt}
            , C_RETIRE_AMT = #{cRetireAmt}
            , TOTAL_HOUR = #{totalHour}
            , WORK_DAYS = #{workDays}
        WHERE
            MEMBER_ID = #{memberId}
            AND DEPT_ID = #{deptId}
            AND YYYYMM = #{yyyymm}
    </update>

    <update id="updateMemberPaymentDynamic" parameterType="com.neofect.gts.core.services.member.domain.MemberPayment">
        /* com.neofect.gts.core.services.member.repository.MemberPaymentRepository_.updateMemberPaymentDynamic */

        UPDATE GTS2016.MEMBER_PAYMENT
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            MEMBER_ID = #{memberId}
            AND DEPT_ID = #{deptId}
            AND YYYYMM = #{yyyymm}
    </update>

    <delete id="deleteMemberPayment" parameterType="long">
        /* com.neofect.gts.core.services.member.repository.MemberPaymentRepository_.deleteMemberPayment */

        DELETE FROM GTS2016.MEMBER_PAYMENT
        WHERE
            MEMBER_ID = #{memberId}
            AND DEPT_ID = #{deptId}
            AND YYYYMM = #{yyyymm}
    </delete>

    <sql id="insert_values_">

        #{payDate},
        #{bankDiv},
        #{depositno},
        #{deductCnt},
        #{memberAge},
        #{memberAgeMonth},
        #{totalAmt},
        #{totalIncentiveAmt},
        #{taxableAmt},
        #{nottaxableAmt},
        #{incomeTaxAmt},
        #{residenceTaxAmt},
        #{pensionAmt},
        #{healthinsureAmt},
        #{longtermAmt},
        #{employinsureAmt},
        #{etcdeductionAmt},
        #{remark},
        #{rowInputEmpNo},
        #{rowInputDate},
        #{rowInputIp},
        #{rowUpdateEmpNo},
        #{rowUpdateDate},
        #{rowUpdateIp},
        #{cPensionAmt},
        #{cHealthinsureAmt},
        #{cLongtermAmt},
        #{cEmpinsuAmt},
        #{cIndaccAmt},
        #{cEmpinsu2Amt},
        #{cRetireAmt},
        #{totalHour},
        #{workDays}
    </sql>

    <insert id="insertMemberPayment">
        /* com.neofect.gts.core.services.member.repository.MemberPaymentRepository_.insertMemberPayment */


        INSERT INTO GTS2016.MEMBER_PAYMENT
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

