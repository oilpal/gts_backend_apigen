<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.rent.repository.RentReqMainRepository_">

    <resultMap id="simpleRentReqMainResult_" type="com.neofect.gts.core.services.rent.domain.RentReqMain">
        <!-- 지사ID -->
        <id     property="deptId" column="DEPT_ID"/>
        <!-- 입력일자 -->
        <id     property="enterDate" column="ENTER_DATE"/>
        <!-- 입력순번 -->
        <id     property="enterSeq" column="ENTER_SEQ"/>
        <!-- 입력자 -->
        <result property="enterId" column="ENTER_ID"/>
        <!-- 수정자 -->
        <result property="editId" column="EDIT_ID"/>
        <!-- 수정일자 -->
        <result property="editDate" column="EDIT_DATE"/>
        <!-- 승인자 -->
        <result property="accId" column="ACC_ID"/>
        <!-- 승인일자 -->
        <result property="accDate" column="ACC_DATE"/>
        <!-- 적요 -->
        <result property="remark" column="REMARK"/>
        <!-- 지사명 -->
        <result property="deptName" column="DEPT_NAME"/>
        <!-- 거래처ID -->
        <result property="custId" column="CUST_ID"/>
        <!-- 거래처코드 -->
        <result property="custCode" column="CUST_CODE"/>
        <!-- 거래처명 -->
        <result property="custName" column="CUST_NAME"/>
        <!-- 요청일 -->
        <result property="reqDate" column="REQ_DATE"/>
        <!-- 입출고일자 -->
        <result property="inoutDate" column="INOUT_DATE"/>
        <!-- 납기일자 -->
        <result property="ndate" column="NDATE"/>
        <!-- 유효기간 -->
        <result property="ydate" column="YDATE"/>
        <!-- 부가세포함여부 -->
        <result property="vatDiv" column="VAT_DIV"/>
        <!-- 지불조건 -->
        <result property="paycond" column="PAYCOND"/>
        <!-- 납품조건 -->
        <result property="delicond" column="DELICOND"/>
        <!-- 요청자ID -->
        <result property="reqId" column="REQ_ID"/>
        <!-- 발의전표일자 -->
        <result property="bSlipDate" column="B_SLIP_DATE"/>
        <!-- 발의지사ID -->
        <result property="bDeptId" column="B_DEPT_ID"/>
        <!-- 발의전표번호 -->
        <result property="bSlipSeq" column="B_SLIP_SEQ"/>
        <!-- 처리지사ID -->
        <result property="pdeptId" column="PDEPT_ID"/>
        <!-- 시작일 -->
        <result property="startDate" column="START_DATE"/>
        <!-- 종료일 -->
        <result property="endDate" column="END_DATE"/>
        <!-- 현재상태 -->
        <result property="orderStatus" column="ORDER_STATUS"/>
        
        <result property="rowInputEmpNo" column="ROW_INPUT_EMP_NO"/>
        
        <result property="rowInputDate" column="ROW_INPUT_DATE"/>
        
        <result property="rowInputIp" column="ROW_INPUT_IP"/>
        
        <result property="rowUpdateEmpNo" column="ROW_UPDATE_EMP_NO"/>
        
        <result property="rowUpdateDate" column="ROW_UPDATE_DATE"/>
        
        <result property="rowUpdateIp" column="ROW_UPDATE_IP"/>
        <!-- 전화번호 -->
        <result property="phone" column="PHONE"/>
        <!-- 팩스번호 -->
        <result property="fax" column="FAX"/>
        <!-- 핸드폰 -->
        <result property="hp" column="HP"/>
        <!-- 이메일 -->
        <result property="email" column="EMAIL"/>
        <!-- 담당자성명 -->
        <result property="managerName" column="MANAGER_NAME"/>
        <!-- 담당자전화 -->
        <result property="managerPhone" column="MANAGER_PHONE"/>
        <!-- 담당자핸드폰 -->
        <result property="managerHp" column="MANAGER_HP"/>
    </resultMap>

    <sql id="simpleRentReqMainCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="deptIds != null and !deptIds.isEmpty()">
            AND ${_alias}DEPT_ID IN <foreach collection="deptIds" item="deptIdValue" open="(" close=")" separator=",">#{ deptIdValue }</foreach>
        </if>
        <if test="enterDates != null and !enterDates.isEmpty()">
            AND ${_alias}ENTER_DATE IN <foreach collection="enterDates" item="enterDateValue" open="(" close=")" separator=",">#{ enterDateValue }</foreach>
        </if>
        <if test="enterSeqs != null and !enterSeqs.isEmpty()">
            AND ${_alias}ENTER_SEQ IN <foreach collection="enterSeqs" item="enterSeqValue" open="(" close=")" separator=",">#{ enterSeqValue }</foreach>
        </if>
        <if test="deptId != null and deptId != ''">
            AND ${_alias}DEPT_ID = #{deptId}
        </if>
        <if test="enterDate != null and enterDate.enabled == true">
            <if test="enterDate.from != null and enterDate.from != ''">
            AND ${_alias}ENTER_DATE >= TO_DATE(#{enterDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="enterDate.to != null and enterDate.to != ''">
            AND ${_alias}ENTER_DATE <![CDATA[ < ]]> TO_DATE(#{enterDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="enterSeq != null">
            AND ${_alias}ENTER_SEQ = #{enterSeq}
        </if>
        <if test="enterId != null and enterId != ''">
            AND ${_alias}ENTER_ID = #{enterId}
        </if>
        <if test="editId != null and editId != ''">
            AND ${_alias}EDIT_ID = #{editId}
        </if>
        <if test="editDate != null and editDate.enabled == true">
            <if test="editDate.from != null and editDate.from != ''">
            AND ${_alias}EDIT_DATE >= TO_DATE(#{editDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="editDate.to != null and editDate.to != ''">
            AND ${_alias}EDIT_DATE <![CDATA[ < ]]> TO_DATE(#{editDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="accId != null and accId != ''">
            AND ${_alias}ACC_ID = #{accId}
        </if>
        <if test="accDate != null and accDate.enabled == true">
            <if test="accDate.from != null and accDate.from != ''">
            AND ${_alias}ACC_DATE >= TO_DATE(#{accDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="accDate.to != null and accDate.to != ''">
            AND ${_alias}ACC_DATE <![CDATA[ < ]]> TO_DATE(#{accDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="remark != null and remark != ''">
            AND ${_alias}REMARK = #{remark}
        </if>
        <if test="deptName != null and deptName != ''">
            AND ${_alias}DEPT_NAME = #{deptName}
        </if>
        <if test="custId != null">
            AND ${_alias}CUST_ID = #{custId}
        </if>
        <if test="custCode != null and custCode != ''">
            AND ${_alias}CUST_CODE = #{custCode}
        </if>
        <if test="custName != null and custName != ''">
            AND ${_alias}CUST_NAME = #{custName}
        </if>
        <if test="reqDate != null and reqDate.enabled == true">
            <if test="reqDate.from != null and reqDate.from != ''">
            AND ${_alias}REQ_DATE >= TO_DATE(#{reqDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="reqDate.to != null and reqDate.to != ''">
            AND ${_alias}REQ_DATE <![CDATA[ < ]]> TO_DATE(#{reqDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="inoutDate != null and inoutDate.enabled == true">
            <if test="inoutDate.from != null and inoutDate.from != ''">
            AND ${_alias}INOUT_DATE >= TO_DATE(#{inoutDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="inoutDate.to != null and inoutDate.to != ''">
            AND ${_alias}INOUT_DATE <![CDATA[ < ]]> TO_DATE(#{inoutDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="ndate != null and ndate.enabled == true">
            <if test="ndate.from != null and ndate.from != ''">
            AND ${_alias}NDATE >= TO_DATE(#{ndate.from}, 'YYYY.MM.DD')
            </if>
            <if test="ndate.to != null and ndate.to != ''">
            AND ${_alias}NDATE <![CDATA[ < ]]> TO_DATE(#{ndate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="ydate != null and ydate.enabled == true">
            <if test="ydate.from != null and ydate.from != ''">
            AND ${_alias}YDATE >= TO_DATE(#{ydate.from}, 'YYYY.MM.DD')
            </if>
            <if test="ydate.to != null and ydate.to != ''">
            AND ${_alias}YDATE <![CDATA[ < ]]> TO_DATE(#{ydate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="vatDiv != null and vatDiv != ''">
            AND ${_alias}VAT_DIV = #{vatDiv}
        </if>
        <if test="paycond != null and paycond != ''">
            AND ${_alias}PAYCOND = #{paycond}
        </if>
        <if test="delicond != null and delicond != ''">
            AND ${_alias}DELICOND = #{delicond}
        </if>
        <if test="reqId != null and reqId != ''">
            AND ${_alias}REQ_ID = #{reqId}
        </if>
        <if test="bSlipDate != null and bSlipDate.enabled == true">
            <if test="bSlipDate.from != null and bSlipDate.from != ''">
            AND ${_alias}B_SLIP_DATE >= TO_DATE(#{bSlipDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="bSlipDate.to != null and bSlipDate.to != ''">
            AND ${_alias}B_SLIP_DATE <![CDATA[ < ]]> TO_DATE(#{bSlipDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="bDeptId != null">
            AND ${_alias}B_DEPT_ID = #{bDeptId}
        </if>
        <if test="bSlipSeq != null">
            AND ${_alias}B_SLIP_SEQ = #{bSlipSeq}
        </if>
        <if test="pdeptId != null and pdeptId != ''">
            AND ${_alias}PDEPT_ID = #{pdeptId}
        </if>
        <if test="startDate != null and startDate.enabled == true">
            <if test="startDate.from != null and startDate.from != ''">
            AND ${_alias}START_DATE >= TO_DATE(#{startDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="startDate.to != null and startDate.to != ''">
            AND ${_alias}START_DATE <![CDATA[ < ]]> TO_DATE(#{startDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="endDate != null and endDate.enabled == true">
            <if test="endDate.from != null and endDate.from != ''">
            AND ${_alias}END_DATE >= TO_DATE(#{endDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="endDate.to != null and endDate.to != ''">
            AND ${_alias}END_DATE <![CDATA[ < ]]> TO_DATE(#{endDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="orderStatus != null and orderStatus != ''">
            AND ${_alias}ORDER_STATUS = #{orderStatus}
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            AND ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo}
        </if>
        <if test="rowInputDate != null and rowInputDate.enabled == true">
            <if test="rowInputDate.from != null and rowInputDate.from != ''">
            AND ${_alias}ROW_INPUT_DATE >= TO_DATE(#{rowInputDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowInputDate.to != null and rowInputDate.to != ''">
            AND ${_alias}ROW_INPUT_DATE <![CDATA[ < ]]> TO_DATE(#{rowInputDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            AND ${_alias}ROW_INPUT_IP = #{rowInputIp}
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            AND ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate.enabled == true">
            <if test="rowUpdateDate.from != null and rowUpdateDate.from != ''">
            AND ${_alias}ROW_UPDATE_DATE >= TO_DATE(#{rowUpdateDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowUpdateDate.to != null and rowUpdateDate.to != ''">
            AND ${_alias}ROW_UPDATE_DATE <![CDATA[ < ]]> TO_DATE(#{rowUpdateDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            AND ${_alias}ROW_UPDATE_IP = #{rowUpdateIp}
        </if>
        <if test="phone != null and phone != ''">
            AND ${_alias}PHONE = #{phone}
        </if>
        <if test="fax != null and fax != ''">
            AND ${_alias}FAX = #{fax}
        </if>
        <if test="hp != null and hp != ''">
            AND ${_alias}HP = #{hp}
        </if>
        <if test="email != null and email != ''">
            AND ${_alias}EMAIL = #{email}
        </if>
        <if test="managerName != null and managerName != ''">
            AND ${_alias}MANAGER_NAME = #{managerName}
        </if>
        <if test="managerPhone != null and managerPhone != ''">
            AND ${_alias}MANAGER_PHONE = #{managerPhone}
        </if>
        <if test="managerHp != null and managerHp != ''">
            AND ${_alias}MANAGER_HP = #{managerHp}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}DEPT_ID AS ${_asPrefix}DEPT_ID, ${_alias}ENTER_DATE AS ${_asPrefix}ENTER_DATE, ${_alias}ENTER_SEQ AS ${_asPrefix}ENTER_SEQ, ${_alias}ENTER_ID AS ${_asPrefix}ENTER_ID, ${_alias}EDIT_ID AS ${_asPrefix}EDIT_ID, ${_alias}EDIT_DATE AS ${_asPrefix}EDIT_DATE, ${_alias}ACC_ID AS ${_asPrefix}ACC_ID, ${_alias}ACC_DATE AS ${_asPrefix}ACC_DATE, ${_alias}REMARK AS ${_asPrefix}REMARK, ${_alias}DEPT_NAME AS ${_asPrefix}DEPT_NAME, ${_alias}CUST_ID AS ${_asPrefix}CUST_ID, ${_alias}CUST_CODE AS ${_asPrefix}CUST_CODE, ${_alias}CUST_NAME AS ${_asPrefix}CUST_NAME, ${_alias}REQ_DATE AS ${_asPrefix}REQ_DATE, ${_alias}INOUT_DATE AS ${_asPrefix}INOUT_DATE, ${_alias}NDATE AS ${_asPrefix}NDATE, ${_alias}YDATE AS ${_asPrefix}YDATE, ${_alias}VAT_DIV AS ${_asPrefix}VAT_DIV, ${_alias}PAYCOND AS ${_asPrefix}PAYCOND, ${_alias}DELICOND AS ${_asPrefix}DELICOND, ${_alias}REQ_ID AS ${_asPrefix}REQ_ID, ${_alias}B_SLIP_DATE AS ${_asPrefix}B_SLIP_DATE, ${_alias}B_DEPT_ID AS ${_asPrefix}B_DEPT_ID, ${_alias}B_SLIP_SEQ AS ${_asPrefix}B_SLIP_SEQ, ${_alias}PDEPT_ID AS ${_asPrefix}PDEPT_ID, ${_alias}START_DATE AS ${_asPrefix}START_DATE, ${_alias}END_DATE AS ${_asPrefix}END_DATE, ${_alias}ORDER_STATUS AS ${_asPrefix}ORDER_STATUS, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}PHONE AS ${_asPrefix}PHONE, ${_alias}FAX AS ${_asPrefix}FAX, ${_alias}HP AS ${_asPrefix}HP, ${_alias}EMAIL AS ${_asPrefix}EMAIL, ${_alias}MANAGER_NAME AS ${_asPrefix}MANAGER_NAME, ${_alias}MANAGER_PHONE AS ${_asPrefix}MANAGER_PHONE, ${_alias}MANAGER_HP AS ${_asPrefix}MANAGER_HP        </when>
        <otherwise>
            ${_alias}DEPT_ID, ${_alias}ENTER_DATE, ${_alias}ENTER_SEQ, ${_alias}ENTER_ID, ${_alias}EDIT_ID, ${_alias}EDIT_DATE, ${_alias}ACC_ID, ${_alias}ACC_DATE, ${_alias}REMARK, ${_alias}DEPT_NAME, ${_alias}CUST_ID, ${_alias}CUST_CODE, ${_alias}CUST_NAME, ${_alias}REQ_DATE, ${_alias}INOUT_DATE, ${_alias}NDATE, ${_alias}YDATE, ${_alias}VAT_DIV, ${_alias}PAYCOND, ${_alias}DELICOND, ${_alias}REQ_ID, ${_alias}B_SLIP_DATE, ${_alias}B_DEPT_ID, ${_alias}B_SLIP_SEQ, ${_alias}PDEPT_ID, ${_alias}START_DATE, ${_alias}END_DATE, ${_alias}ORDER_STATUS, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}PHONE, ${_alias}FAX, ${_alias}HP, ${_alias}EMAIL, ${_alias}MANAGER_NAME, ${_alias}MANAGER_PHONE, ${_alias}MANAGER_HP        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}ENTER_ID AS ${_asPrefix}ENTER_ID, ${_alias}EDIT_ID AS ${_asPrefix}EDIT_ID, ${_alias}EDIT_DATE AS ${_asPrefix}EDIT_DATE, ${_alias}ACC_ID AS ${_asPrefix}ACC_ID, ${_alias}ACC_DATE AS ${_asPrefix}ACC_DATE, ${_alias}REMARK AS ${_asPrefix}REMARK, ${_alias}DEPT_NAME AS ${_asPrefix}DEPT_NAME, ${_alias}CUST_ID AS ${_asPrefix}CUST_ID, ${_alias}CUST_CODE AS ${_asPrefix}CUST_CODE, ${_alias}CUST_NAME AS ${_asPrefix}CUST_NAME, ${_alias}REQ_DATE AS ${_asPrefix}REQ_DATE, ${_alias}INOUT_DATE AS ${_asPrefix}INOUT_DATE, ${_alias}NDATE AS ${_asPrefix}NDATE, ${_alias}YDATE AS ${_asPrefix}YDATE, ${_alias}VAT_DIV AS ${_asPrefix}VAT_DIV, ${_alias}PAYCOND AS ${_asPrefix}PAYCOND, ${_alias}DELICOND AS ${_asPrefix}DELICOND, ${_alias}REQ_ID AS ${_asPrefix}REQ_ID, ${_alias}B_SLIP_DATE AS ${_asPrefix}B_SLIP_DATE, ${_alias}B_DEPT_ID AS ${_asPrefix}B_DEPT_ID, ${_alias}B_SLIP_SEQ AS ${_asPrefix}B_SLIP_SEQ, ${_alias}PDEPT_ID AS ${_asPrefix}PDEPT_ID, ${_alias}START_DATE AS ${_asPrefix}START_DATE, ${_alias}END_DATE AS ${_asPrefix}END_DATE, ${_alias}ORDER_STATUS AS ${_asPrefix}ORDER_STATUS, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}PHONE AS ${_asPrefix}PHONE, ${_alias}FAX AS ${_asPrefix}FAX, ${_alias}HP AS ${_asPrefix}HP, ${_alias}EMAIL AS ${_asPrefix}EMAIL, ${_alias}MANAGER_NAME AS ${_asPrefix}MANAGER_NAME, ${_alias}MANAGER_PHONE AS ${_asPrefix}MANAGER_PHONE, ${_alias}MANAGER_HP AS ${_asPrefix}MANAGER_HP        </when>
        <otherwise>
            ${_alias}ENTER_ID, ${_alias}EDIT_ID, ${_alias}EDIT_DATE, ${_alias}ACC_ID, ${_alias}ACC_DATE, ${_alias}REMARK, ${_alias}DEPT_NAME, ${_alias}CUST_ID, ${_alias}CUST_CODE, ${_alias}CUST_NAME, ${_alias}REQ_DATE, ${_alias}INOUT_DATE, ${_alias}NDATE, ${_alias}YDATE, ${_alias}VAT_DIV, ${_alias}PAYCOND, ${_alias}DELICOND, ${_alias}REQ_ID, ${_alias}B_SLIP_DATE, ${_alias}B_DEPT_ID, ${_alias}B_SLIP_SEQ, ${_alias}PDEPT_ID, ${_alias}START_DATE, ${_alias}END_DATE, ${_alias}ORDER_STATUS, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}PHONE, ${_alias}FAX, ${_alias}HP, ${_alias}EMAIL, ${_alias}MANAGER_NAME, ${_alias}MANAGER_PHONE, ${_alias}MANAGER_HP        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}DEPT_ID, ${_alias}ENTER_DATE, ${_alias}ENTER_SEQ, ${_alias}ENTER_ID, ${_alias}EDIT_ID, ${_alias}EDIT_DATE, ${_alias}ACC_ID, ${_alias}ACC_DATE, ${_alias}REMARK, ${_alias}DEPT_NAME, ${_alias}CUST_ID, ${_alias}CUST_CODE, ${_alias}CUST_NAME, ${_alias}REQ_DATE, ${_alias}INOUT_DATE, ${_alias}NDATE, ${_alias}YDATE, ${_alias}VAT_DIV, ${_alias}PAYCOND, ${_alias}DELICOND, ${_alias}REQ_ID, ${_alias}B_SLIP_DATE, ${_alias}B_DEPT_ID, ${_alias}B_SLIP_SEQ, ${_alias}PDEPT_ID, ${_alias}START_DATE, ${_alias}END_DATE, ${_alias}ORDER_STATUS, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}PHONE, ${_alias}FAX, ${_alias}HP, ${_alias}EMAIL, ${_alias}MANAGER_NAME, ${_alias}MANAGER_PHONE, ${_alias}MANAGER_HP    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}ENTER_ID, ${_alias}EDIT_ID, ${_alias}EDIT_DATE, ${_alias}ACC_ID, ${_alias}ACC_DATE, ${_alias}REMARK, ${_alias}DEPT_NAME, ${_alias}CUST_ID, ${_alias}CUST_CODE, ${_alias}CUST_NAME, ${_alias}REQ_DATE, ${_alias}INOUT_DATE, ${_alias}NDATE, ${_alias}YDATE, ${_alias}VAT_DIV, ${_alias}PAYCOND, ${_alias}DELICOND, ${_alias}REQ_ID, ${_alias}B_SLIP_DATE, ${_alias}B_DEPT_ID, ${_alias}B_SLIP_SEQ, ${_alias}PDEPT_ID, ${_alias}START_DATE, ${_alias}END_DATE, ${_alias}ORDER_STATUS, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}PHONE, ${_alias}FAX, ${_alias}HP, ${_alias}EMAIL, ${_alias}MANAGER_NAME, ${_alias}MANAGER_PHONE, ${_alias}MANAGER_HP    </sql>

    <select id="simpleGetRentReqMain" parameterType="long" resultMap="simpleRentReqMainResult_">
        /* com.neofect.gts.core.services.rent.repository.RentReqMainRepository_.simpleGetRentReqMain */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.RENT_REQ_MAIN
        WHERE
        DEPT_ID = #{deptId}
        AND ENTER_DATE = #{enterDate}
        AND ENTER_SEQ = #{enterSeq}
	</select>

    <select id="simpleListRentReqMainCnt" resultType="int">
        /* com.neofect.gts.core.services.rent.repository.RentReqMainRepository_.simpleListRentReqMainCnt */

        SELECT COUNT(*)
        FROM GTS2016.RENT_REQ_MAIN
        <include refid="simpleRentReqMainCondition_" />
    </select>

    <select id="simpleListRentReqMain" resultMap="simpleRentReqMainResult_">
        /* com.neofect.gts.core.services.rent.repository.RentReqMainRepository_.simpleListRentReqMain */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.RENT_REQ_MAIN
        <include refid="simpleRentReqMainCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="enterId != null and enterId != ''">
            ${_alias}ENTER_ID = #{enterId},
        </if>
        <if test="editId != null and editId != ''">
            ${_alias}EDIT_ID = #{editId},
        </if>
        <if test="editDate != null">
            ${_alias}EDIT_DATE = #{editDate},
        </if>
        <if test="accId != null and accId != ''">
            ${_alias}ACC_ID = #{accId},
        </if>
        <if test="accDate != null">
            ${_alias}ACC_DATE = #{accDate},
        </if>
        <if test="remark != null and remark != ''">
            ${_alias}REMARK = #{remark},
        </if>
        <if test="deptName != null and deptName != ''">
            ${_alias}DEPT_NAME = #{deptName},
        </if>
        <if test="custId != null">
            ${_alias}CUST_ID = #{custId},
        </if>
        <if test="custCode != null and custCode != ''">
            ${_alias}CUST_CODE = #{custCode},
        </if>
        <if test="custName != null and custName != ''">
            ${_alias}CUST_NAME = #{custName},
        </if>
        <if test="reqDate != null">
            ${_alias}REQ_DATE = #{reqDate},
        </if>
        <if test="inoutDate != null">
            ${_alias}INOUT_DATE = #{inoutDate},
        </if>
        <if test="ndate != null">
            ${_alias}NDATE = #{ndate},
        </if>
        <if test="ydate != null">
            ${_alias}YDATE = #{ydate},
        </if>
        <if test="vatDiv != null and vatDiv != ''">
            ${_alias}VAT_DIV = #{vatDiv},
        </if>
        <if test="paycond != null and paycond != ''">
            ${_alias}PAYCOND = #{paycond},
        </if>
        <if test="delicond != null and delicond != ''">
            ${_alias}DELICOND = #{delicond},
        </if>
        <if test="reqId != null and reqId != ''">
            ${_alias}REQ_ID = #{reqId},
        </if>
        <if test="bSlipDate != null">
            ${_alias}B_SLIP_DATE = #{bSlipDate},
        </if>
        <if test="bDeptId != null">
            ${_alias}B_DEPT_ID = #{bDeptId},
        </if>
        <if test="bSlipSeq != null">
            ${_alias}B_SLIP_SEQ = #{bSlipSeq},
        </if>
        <if test="pdeptId != null and pdeptId != ''">
            ${_alias}PDEPT_ID = #{pdeptId},
        </if>
        <if test="startDate != null">
            ${_alias}START_DATE = #{startDate},
        </if>
        <if test="endDate != null">
            ${_alias}END_DATE = #{endDate},
        </if>
        <if test="orderStatus != null and orderStatus != ''">
            ${_alias}ORDER_STATUS = #{orderStatus},
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo},
        </if>
        <if test="rowInputDate != null">
            ${_alias}ROW_INPUT_DATE = #{rowInputDate},
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            ${_alias}ROW_INPUT_IP = #{rowInputIp},
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo},
        </if>
        <if test="rowUpdateDate != null">
            ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate},
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            ${_alias}ROW_UPDATE_IP = #{rowUpdateIp},
        </if>
        <if test="phone != null and phone != ''">
            ${_alias}PHONE = #{phone},
        </if>
        <if test="fax != null and fax != ''">
            ${_alias}FAX = #{fax},
        </if>
        <if test="hp != null and hp != ''">
            ${_alias}HP = #{hp},
        </if>
        <if test="email != null and email != ''">
            ${_alias}EMAIL = #{email},
        </if>
        <if test="managerName != null and managerName != ''">
            ${_alias}MANAGER_NAME = #{managerName},
        </if>
        <if test="managerPhone != null and managerPhone != ''">
            ${_alias}MANAGER_PHONE = #{managerPhone},
        </if>
        <if test="managerHp != null and managerHp != ''">
            ${_alias}MANAGER_HP = #{managerHp},
        </if>
    </sql>

    <update id="updateRentReqMain" parameterType="com.neofect.gts.core.services.rent.domain.RentReqMain">
        /* com.neofect.gts.core.services.rent.repository.RentReqMainRepository_.updateRentReqMain */

        UPDATE GTS2016.RENT_REQ_MAIN
        SET
             ENTER_ID = #{enterId}
            , EDIT_ID = #{editId}
            , EDIT_DATE = #{editDate}
            , ACC_ID = #{accId}
            , ACC_DATE = #{accDate}
            , REMARK = #{remark}
            , DEPT_NAME = #{deptName}
            , CUST_ID = #{custId}
            , CUST_CODE = #{custCode}
            , CUST_NAME = #{custName}
            , REQ_DATE = #{reqDate}
            , INOUT_DATE = #{inoutDate}
            , NDATE = #{ndate}
            , YDATE = #{ydate}
            , VAT_DIV = #{vatDiv}
            , PAYCOND = #{paycond}
            , DELICOND = #{delicond}
            , REQ_ID = #{reqId}
            , B_SLIP_DATE = #{bSlipDate}
            , B_DEPT_ID = #{bDeptId}
            , B_SLIP_SEQ = #{bSlipSeq}
            , PDEPT_ID = #{pdeptId}
            , START_DATE = #{startDate}
            , END_DATE = #{endDate}
            , ORDER_STATUS = #{orderStatus}
            , ROW_INPUT_EMP_NO = #{rowInputEmpNo}
            , ROW_INPUT_DATE = #{rowInputDate}
            , ROW_INPUT_IP = #{rowInputIp}
            , ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
            , ROW_UPDATE_DATE = #{rowUpdateDate}
            , ROW_UPDATE_IP = #{rowUpdateIp}
            , PHONE = #{phone}
            , FAX = #{fax}
            , HP = #{hp}
            , EMAIL = #{email}
            , MANAGER_NAME = #{managerName}
            , MANAGER_PHONE = #{managerPhone}
            , MANAGER_HP = #{managerHp}
        WHERE
            DEPT_ID = #{deptId}
            AND ENTER_DATE = #{enterDate}
            AND ENTER_SEQ = #{enterSeq}
    </update>

    <update id="updateRentReqMainDynamic" parameterType="com.neofect.gts.core.services.rent.domain.RentReqMain">
        /* com.neofect.gts.core.services.rent.repository.RentReqMainRepository_.updateRentReqMainDynamic */

        UPDATE GTS2016.RENT_REQ_MAIN
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            DEPT_ID = #{deptId}
            AND ENTER_DATE = #{enterDate}
            AND ENTER_SEQ = #{enterSeq}
    </update>

    <delete id="deleteRentReqMain" parameterType="long">
        /* com.neofect.gts.core.services.rent.repository.RentReqMainRepository_.deleteRentReqMain */

        DELETE FROM GTS2016.RENT_REQ_MAIN
        WHERE
            DEPT_ID = #{deptId}
            AND ENTER_DATE = #{enterDate}
            AND ENTER_SEQ = #{enterSeq}
    </delete>

    <sql id="insert_values_">

        #{enterId},
        #{editId},
        #{editDate},
        #{accId},
        #{accDate},
        #{remark},
        #{deptName},
        #{custId},
        #{custCode},
        #{custName},
        #{reqDate},
        #{inoutDate},
        #{ndate},
        #{ydate},
        #{vatDiv},
        #{paycond},
        #{delicond},
        #{reqId},
        #{bSlipDate},
        #{bDeptId},
        #{bSlipSeq},
        #{pdeptId},
        #{startDate},
        #{endDate},
        #{orderStatus},
        #{rowInputEmpNo},
        #{rowInputDate},
        #{rowInputIp},
        #{rowUpdateEmpNo},
        #{rowUpdateDate},
        #{rowUpdateIp},
        #{phone},
        #{fax},
        #{hp},
        #{email},
        #{managerName},
        #{managerPhone},
        #{managerHp}
    </sql>

    <insert id="insertRentReqMain">
        /* com.neofect.gts.core.services.rent.repository.RentReqMainRepository_.insertRentReqMain */


        INSERT INTO GTS2016.RENT_REQ_MAIN
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

