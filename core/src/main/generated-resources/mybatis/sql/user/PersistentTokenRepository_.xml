<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.user.repository.PersistentTokenRepository_">

    <!--region ====================================================================================== reference only -->
    <resultMap id="_metaInfo" type="java.util.Map">
        <!-- Generated Files -->
        <result property="model_" column="com.neofect.gts.core.services.user.domain.PersistentToken_"/>
        <result property="repository_" column="com.neofect.gts.core.services.user.repository.PersistentTokenRepository_"/>
        <!-- Extended Files -->
        <result property="model" column="com.neofect.gts.core.services.user.domain.PersistentToken"/>
        <result property="repository" column="com.neofect.gts.core.services.user.repository.PersistentTokenRepository"/>
    </resultMap>

    <!--
     ! All Columns
     !  pt_id, pt_series, pt_token_value, pt_token_date, pt_ip_address, pt_user_agent, pt_user_key
    -->

    <!--endregion =================================================================================== reference only -->

    <resultMap id="simplePersistentTokenResult_" type="com.neofect.gts.core.services.user.domain.PersistentToken">
        <!-- 아이디 -->
        <id     property="id" column="pt_id"/>
        <!-- 시리즈 -->
        <result property="series" column="pt_series"/>
        <!-- 토큰값 -->
        <result property="tokenValue" column="pt_token_value"/>
        <!-- 토큰일자 -->
        <result property="tokenDate" column="pt_token_date"/>
        <!-- 아이피 -->
        <result property="ipAddress" column="pt_ip_address"/>
        <!-- 유저에이전트 -->
        <result property="userAgent" column="pt_user_agent"/>
        <!-- 사용자아이디 -->
        <result property="userKey" column="pt_user_key"/>
    </resultMap>

    <sql id="simplePersistentTokenCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="ids != null and !ids.isEmpty()">
            AND ${_alias}pt_id IN <foreach collection="ids" item="idValue" open="(" close=")" separator=",">#{ idValue }</foreach>
        </if>
        <if test="id != null">
            AND ${_alias}pt_id = #{id}
        </if>
        <if test="series != null and series != ''">
            AND ${_alias}pt_series = #{series}
        </if>
        <if test="tokenValue != null and tokenValue != ''">
            AND ${_alias}pt_token_value = #{tokenValue}
        </if>
        <if test="tokenDate != null and tokenDate.enabled == true">
            <if test="tokenDate.from != null and tokenDate.from != ''">
            AND ${_alias}pt_token_date >= STR_TO_DATE(#{tokenDate.from}, '%Y.%m.%d')
            </if>
            <if test="tokenDate.to != null and tokenDate.to != ''">
            AND ${_alias}pt_token_date <![CDATA[ < ]]> DATE_ADD(STR_TO_DATE(#{tokenDate.to}, '%Y.%m.%d'), INTERVAL 1 DAY)
            </if>
        </if>
        <if test="ipAddress != null and ipAddress != ''">
            AND ${_alias}pt_ip_address = #{ipAddress}
        </if>
        <if test="userAgent != null and userAgent != ''">
            AND ${_alias}pt_user_agent = #{userAgent}
        </if>
        <if test="userKey != null">
            AND ${_alias}pt_user_key = #{userKey}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}pt_id AS ${_asPrefix}pt_id, ${_alias}pt_series AS ${_asPrefix}pt_series, ${_alias}pt_token_value AS ${_asPrefix}pt_token_value, ${_alias}pt_token_date AS ${_asPrefix}pt_token_date, ${_alias}pt_ip_address AS ${_asPrefix}pt_ip_address, ${_alias}pt_user_agent AS ${_asPrefix}pt_user_agent, ${_alias}pt_user_key AS ${_asPrefix}pt_user_key        </when>
        <otherwise>
            ${_alias}pt_id, ${_alias}pt_series, ${_alias}pt_token_value, ${_alias}pt_token_date, ${_alias}pt_ip_address, ${_alias}pt_user_agent, ${_alias}pt_user_key        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}pt_series AS ${_asPrefix}pt_series, ${_alias}pt_token_value AS ${_asPrefix}pt_token_value, ${_alias}pt_token_date AS ${_asPrefix}pt_token_date, ${_alias}pt_ip_address AS ${_asPrefix}pt_ip_address, ${_alias}pt_user_agent AS ${_asPrefix}pt_user_agent, ${_alias}pt_user_key AS ${_asPrefix}pt_user_key        </when>
        <otherwise>
            ${_alias}pt_series, ${_alias}pt_token_value, ${_alias}pt_token_date, ${_alias}pt_ip_address, ${_alias}pt_user_agent, ${_alias}pt_user_key        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}pt_id, ${_alias}pt_series, ${_alias}pt_token_value, ${_alias}pt_token_date, ${_alias}pt_ip_address, ${_alias}pt_user_agent, ${_alias}pt_user_key    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}pt_series, ${_alias}pt_token_value, ${_alias}pt_token_date, ${_alias}pt_ip_address, ${_alias}pt_user_agent, ${_alias}pt_user_key    </sql>

    <select id="simpleGetPersistentToken" parameterType="long" resultMap="simplePersistentTokenResult_">
        /* PersistentTokenRepository_.simpleGetPersistentToken */

        SELECT
            <include refid="columns_" />
        FROM
            nv_persistent_token
        WHERE
        pt_id = #{id}
	</select>

    <select id="simpleListPersistentTokenCnt" resultType="int">
        /* PersistentTokenRepository_.simpleListPersistentTokenCnt */

        SELECT COUNT(*)
        FROM nv_persistent_token
        <include refid="simplePersistentTokenCondition_" />
    </select>

    <select id="simpleListPersistentToken" resultMap="simplePersistentTokenResult_">
        /* PersistentTokenRepository_.simpleListPersistentToken */
        SELECT
            <include refid="columns_" />
        FROM nv_persistent_token
        <include refid="simplePersistentTokenCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="series != null and series != ''">
            ${_alias}pt_series = #{series},
        </if>
        <if test="tokenValue != null and tokenValue != ''">
            ${_alias}pt_token_value = #{tokenValue},
        </if>
        <if test="tokenDate != null">
            ${_alias}pt_token_date = #{tokenDate},
        </if>
        <if test="ipAddress != null and ipAddress != ''">
            ${_alias}pt_ip_address = #{ipAddress},
        </if>
        <if test="userAgent != null and userAgent != ''">
            ${_alias}pt_user_agent = #{userAgent},
        </if>
        <if test="userKey != null">
            ${_alias}pt_user_key = #{userKey},
        </if>
    </sql>

    <update id="updatePersistentToken" parameterType="com.neofect.gts.core.services.user.domain.PersistentToken">
        /* com.unvus.iflex.core.services.user.repository.PersistentTokenRepository_.updatePersistentToken */

        UPDATE nv_persistent_token
        SET
             pt_series = #{series}
            , pt_token_value = #{tokenValue}
            , pt_token_date = #{tokenDate}
            , pt_ip_address = #{ipAddress}
            , pt_user_agent = #{userAgent}
            , pt_user_key = #{userKey}
        WHERE
            pt_id = #{id}
    </update>

    <update id="updatePersistentTokenDynamic" parameterType="com.neofect.gts.core.services.user.domain.PersistentToken">
        /* PersistentTokenRepository_.updatePersistentTokenDynamic */

        UPDATE nv_persistent_token
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            pt_id = #{id}
    </update>

    <delete id="deletePersistentToken" parameterType="long">
        /* com.unvus.iflex.core.services.user.repository.PersistentTokenRepository_.deletePersistentToken */

        DELETE FROM nv_persistent_token
        WHERE
            pt_id = #{id}
    </delete>

    <sql id="insert_values_">

        #{series},
        #{tokenValue},
        #{tokenDate},
        #{ipAddress},
        #{userAgent},
        #{userKey}
    </sql>

    <insert id="insertPersistentToken">
        /* PersistentTokenRepository_.insertPersistentToken */


        INSERT INTO nv_persistent_token
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

