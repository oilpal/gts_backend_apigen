<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.user.repository.UserRepository_">

    <!--region ====================================================================================== reference only -->
    <resultMap id="_metaInfo" type="java.util.Map">
        <!-- Generated Files -->
        <result property="model_" column="com.neofect.gts.core.services.user.domain.User_"/>
        <result property="repository_" column="com.neofect.gts.core.services.user.repository.UserRepository_"/>
        <!-- Extended Files -->
        <result property="model" column="com.neofect.gts.core.services.user.domain.User"/>
        <result property="repository" column="com.neofect.gts.core.services.user.repository.UserRepository"/>
    </resultMap>

    <!--
     ! All Columns
     !  user_id, user_name, user_gender, user_birth_lunar, user_birth_day, user_comp_name, user_comp_rank, user_comp_role, user_note
    -->

    <!--endregion =================================================================================== reference only -->

    <resultMap id="simpleUserResult_" type="com.neofect.gts.core.services.user.domain.User">
        <!-- 아이디 -->
        <id     property="id" column="user_id"/>
        <!-- 이름 -->
        <result property="name" column="user_name"/>
        <!-- 성별 -->
        <result property="gender" column="user_gender"/>
        <!-- 생년월일-양읍력구분 -->
        <result property="birthLunar" column="user_birth_lunar"/>
        <!-- 생년월일 -->
        <result property="birthDay" column="user_birth_day"/>
        <!-- 회사-이름 -->
        <result property="compName" column="user_comp_name"/>
        <!-- 회사-직급 -->
        <result property="compRank" column="user_comp_rank"/>
        <!-- 회사-직책 -->
        <result property="compRole" column="user_comp_role"/>
        <!-- 노트 -->
        <result property="note" column="user_note"/>
    </resultMap>

    <sql id="simpleUserCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="ids != null and !ids.isEmpty()">
            AND ${_alias}user_id IN <foreach collection="ids" item="idValue" open="(" close=")" separator=",">#{ idValue }</foreach>
        </if>
        <if test="id != null">
            AND ${_alias}user_id = #{id}
        </if>
        <if test="name != null and name != ''">
            AND ${_alias}user_name = #{name}
        </if>
        <if test="gender != null and gender != ''">
            AND ${_alias}user_gender = #{gender}
        </if>
        <if test="birthLunar != null">
            AND ${_alias}user_birth_lunar = #{birthLunar}
        </if>
        <if test="birthDay != null and birthDay.enabled == true">
            <if test="birthDay.from != null and birthDay.from != ''">
            AND ${_alias}user_birth_day >= STR_TO_DATE(#{birthDay.from}, '%Y.%m.%d')
            </if>
            <if test="birthDay.to != null and birthDay.to != ''">
            AND ${_alias}user_birth_day <![CDATA[ < ]]> DATE_ADD(STR_TO_DATE(#{birthDay.to}, '%Y.%m.%d'), INTERVAL 1 DAY)
            </if>
        </if>
        <if test="compName != null and compName != ''">
            AND ${_alias}user_comp_name = #{compName}
        </if>
        <if test="compRank != null and compRank != ''">
            AND ${_alias}user_comp_rank = #{compRank}
        </if>
        <if test="compRole != null and compRole != ''">
            AND ${_alias}user_comp_role = #{compRole}
        </if>
        <if test="note != null and note != ''">
            AND ${_alias}user_note = #{note}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}user_id AS ${_asPrefix}user_id, ${_alias}user_name AS ${_asPrefix}user_name, ${_alias}user_gender AS ${_asPrefix}user_gender, ${_alias}user_birth_lunar AS ${_asPrefix}user_birth_lunar, ${_alias}user_birth_day AS ${_asPrefix}user_birth_day, ${_alias}user_comp_name AS ${_asPrefix}user_comp_name, ${_alias}user_comp_rank AS ${_asPrefix}user_comp_rank, ${_alias}user_comp_role AS ${_asPrefix}user_comp_role, ${_alias}user_note AS ${_asPrefix}user_note        </when>
        <otherwise>
            ${_alias}user_id, ${_alias}user_name, ${_alias}user_gender, ${_alias}user_birth_lunar, ${_alias}user_birth_day, ${_alias}user_comp_name, ${_alias}user_comp_rank, ${_alias}user_comp_role, ${_alias}user_note        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}user_name AS ${_asPrefix}user_name, ${_alias}user_gender AS ${_asPrefix}user_gender, ${_alias}user_birth_lunar AS ${_asPrefix}user_birth_lunar, ${_alias}user_birth_day AS ${_asPrefix}user_birth_day, ${_alias}user_comp_name AS ${_asPrefix}user_comp_name, ${_alias}user_comp_rank AS ${_asPrefix}user_comp_rank, ${_alias}user_comp_role AS ${_asPrefix}user_comp_role, ${_alias}user_note AS ${_asPrefix}user_note        </when>
        <otherwise>
            ${_alias}user_name, ${_alias}user_gender, ${_alias}user_birth_lunar, ${_alias}user_birth_day, ${_alias}user_comp_name, ${_alias}user_comp_rank, ${_alias}user_comp_role, ${_alias}user_note        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}user_id, ${_alias}user_name, ${_alias}user_gender, ${_alias}user_birth_lunar, ${_alias}user_birth_day, ${_alias}user_comp_name, ${_alias}user_comp_rank, ${_alias}user_comp_role, ${_alias}user_note    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}user_name, ${_alias}user_gender, ${_alias}user_birth_lunar, ${_alias}user_birth_day, ${_alias}user_comp_name, ${_alias}user_comp_rank, ${_alias}user_comp_role, ${_alias}user_note    </sql>

    <select id="simpleGetUser" parameterType="long" resultMap="simpleUserResult_">
        /* UserRepository_.simpleGetUser */

        SELECT
            <include refid="columns_" />
        FROM
            nv_user
        WHERE
        user_id = #{id}
	</select>

    <select id="simpleListUserCnt" resultType="int">
        /* UserRepository_.simpleListUserCnt */

        SELECT COUNT(*)
        FROM nv_user
        <include refid="simpleUserCondition_" />
    </select>

    <select id="simpleListUser" resultMap="simpleUserResult_">
        /* UserRepository_.simpleListUser */
        SELECT
            <include refid="columns_" />
        FROM nv_user
        <include refid="simpleUserCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="name != null and name != ''">
            ${_alias}user_name = #{name},
        </if>
        <if test="gender != null and gender != ''">
            ${_alias}user_gender = #{gender},
        </if>
        <if test="birthLunar != null">
            ${_alias}user_birth_lunar = #{birthLunar},
        </if>
        <if test="birthDay != null">
            ${_alias}user_birth_day = #{birthDay},
        </if>
        <if test="compName != null and compName != ''">
            ${_alias}user_comp_name = #{compName},
        </if>
        <if test="compRank != null and compRank != ''">
            ${_alias}user_comp_rank = #{compRank},
        </if>
        <if test="compRole != null and compRole != ''">
            ${_alias}user_comp_role = #{compRole},
        </if>
        <if test="note != null and note != ''">
            ${_alias}user_note = #{note},
        </if>
    </sql>

    <update id="updateUser" parameterType="com.neofect.gts.core.services.user.domain.User">
        /* com.unvus.iflex.core.services.user.repository.UserRepository_.updateUser */

        UPDATE nv_user
        SET
             user_name = #{name}
            , user_gender = #{gender}
            , user_birth_lunar = #{birthLunar}
            , user_birth_day = #{birthDay}
            , user_comp_name = #{compName}
            , user_comp_rank = #{compRank}
            , user_comp_role = #{compRole}
            , user_note = #{note}
        WHERE
            user_id = #{id}
    </update>

    <update id="updateUserDynamic" parameterType="com.neofect.gts.core.services.user.domain.User">
        /* UserRepository_.updateUserDynamic */

        UPDATE nv_user
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            user_id = #{id}
    </update>

    <delete id="deleteUser" parameterType="long">
        /* com.unvus.iflex.core.services.user.repository.UserRepository_.deleteUser */

        DELETE FROM nv_user
        WHERE
            user_id = #{id}
    </delete>

    <sql id="insert_values_">

        #{name},
        #{gender},
        #{birthLunar},
        #{birthDay},
        #{compName},
        #{compRank},
        #{compRole},
        #{note}
    </sql>

    <insert id="insertUser">
        /* UserRepository_.insertUser */


        INSERT INTO nv_user
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

