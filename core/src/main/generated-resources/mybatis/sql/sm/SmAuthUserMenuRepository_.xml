<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.sm.repository.SmAuthUserMenuRepository_">

    <resultMap id="simpleSmAuthUserMenuResult_" type="com.neofect.gts.core.services.sm.domain.SmAuthUserMenu">
        
        <id     property="companyCode" column="COMPANY_CODE"/>
        
        <id     property="userId" column="USER_ID"/>
        
        <id     property="sysId" column="SYS_ID"/>
        
        <id     property="pgmCode" column="PGM_CODE"/>
        
        <result property="authI" column="AUTH_I"/>
        
        <result property="authR" column="AUTH_R"/>
        
        <result property="authD" column="AUTH_D"/>
        
        <result property="authP" column="AUTH_P"/>
        
        <result property="authE" column="AUTH_E"/>
        
        <result property="menuCode" column="MENU_CODE"/>
        
        <result property="menuName" column="MENU_NAME"/>
        
        <result property="sortOrder" column="SORT_ORDER"/>
        
        <result property="rowInputDate" column="ROW_INPUT_DATE"/>
        
        <result property="rowInputEmpNo" column="ROW_INPUT_EMP_NO"/>
        
        <result property="rowInputIp" column="ROW_INPUT_IP"/>
        
        <result property="rowUpdateDate" column="ROW_UPDATE_DATE"/>
        
        <result property="rowUpdateIp" column="ROW_UPDATE_IP"/>
        
        <result property="rowUpdateEmpNo" column="ROW_UPDATE_EMP_NO"/>
        
        <result property="masterYn" column="MASTER_YN"/>
        
        <result property="authYn" column="AUTH_YN"/>
        
        <result property="rootId" column="ROOT_ID"/>
    </resultMap>

    <sql id="simpleSmAuthUserMenuCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="companyCodes != null and !companyCodes.isEmpty()">
            AND ${_alias}COMPANY_CODE IN <foreach collection="companyCodes" item="companyCodeValue" open="(" close=")" separator=",">#{ companyCodeValue }</foreach>
        </if>
        <if test="userIds != null and !userIds.isEmpty()">
            AND ${_alias}USER_ID IN <foreach collection="userIds" item="userIdValue" open="(" close=")" separator=",">#{ userIdValue }</foreach>
        </if>
        <if test="sysIds != null and !sysIds.isEmpty()">
            AND ${_alias}SYS_ID IN <foreach collection="sysIds" item="sysIdValue" open="(" close=")" separator=",">#{ sysIdValue }</foreach>
        </if>
        <if test="pgmCodes != null and !pgmCodes.isEmpty()">
            AND ${_alias}PGM_CODE IN <foreach collection="pgmCodes" item="pgmCodeValue" open="(" close=")" separator=",">#{ pgmCodeValue }</foreach>
        </if>
        <if test="companyCode != null and companyCode != ''">
            AND ${_alias}COMPANY_CODE = #{companyCode}
        </if>
        <if test="userId != null and userId != ''">
            AND ${_alias}USER_ID = #{userId}
        </if>
        <if test="sysId != null and sysId != ''">
            AND ${_alias}SYS_ID = #{sysId}
        </if>
        <if test="pgmCode != null and pgmCode != ''">
            AND ${_alias}PGM_CODE = #{pgmCode}
        </if>
        <if test="authI != null and authI != ''">
            AND ${_alias}AUTH_I = #{authI}
        </if>
        <if test="authR != null and authR != ''">
            AND ${_alias}AUTH_R = #{authR}
        </if>
        <if test="authD != null and authD != ''">
            AND ${_alias}AUTH_D = #{authD}
        </if>
        <if test="authP != null and authP != ''">
            AND ${_alias}AUTH_P = #{authP}
        </if>
        <if test="authE != null and authE != ''">
            AND ${_alias}AUTH_E = #{authE}
        </if>
        <if test="menuCode != null and menuCode != ''">
            AND ${_alias}MENU_CODE = #{menuCode}
        </if>
        <if test="menuName != null and menuName != ''">
            AND ${_alias}MENU_NAME = #{menuName}
        </if>
        <if test="sortOrder != null">
            AND ${_alias}SORT_ORDER = #{sortOrder}
        </if>
        <if test="rowInputDate != null and rowInputDate.enabled == true">
            <if test="rowInputDate.from != null and rowInputDate.from != ''">
            AND ${_alias}ROW_INPUT_DATE >= TO_DATE(#{rowInputDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowInputDate.to != null and rowInputDate.to != ''">
            AND ${_alias}ROW_INPUT_DATE <![CDATA[ < ]]> TO_DATE(#{rowInputDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            AND ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo}
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            AND ${_alias}ROW_INPUT_IP = #{rowInputIp}
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate.enabled == true">
            <if test="rowUpdateDate.from != null and rowUpdateDate.from != ''">
            AND ${_alias}ROW_UPDATE_DATE >= TO_DATE(#{rowUpdateDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowUpdateDate.to != null and rowUpdateDate.to != ''">
            AND ${_alias}ROW_UPDATE_DATE <![CDATA[ < ]]> TO_DATE(#{rowUpdateDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            AND ${_alias}ROW_UPDATE_IP = #{rowUpdateIp}
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            AND ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        </if>
        <if test="masterYn != null and masterYn != ''">
            AND ${_alias}MASTER_YN = #{masterYn}
        </if>
        <if test="authYn != null and authYn != ''">
            AND ${_alias}AUTH_YN = #{authYn}
        </if>
        <if test="rootId != null and rootId != ''">
            AND ${_alias}ROOT_ID = #{rootId}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}COMPANY_CODE AS ${_asPrefix}COMPANY_CODE, ${_alias}USER_ID AS ${_asPrefix}USER_ID, ${_alias}SYS_ID AS ${_asPrefix}SYS_ID, ${_alias}PGM_CODE AS ${_asPrefix}PGM_CODE, ${_alias}AUTH_I AS ${_asPrefix}AUTH_I, ${_alias}AUTH_R AS ${_asPrefix}AUTH_R, ${_alias}AUTH_D AS ${_asPrefix}AUTH_D, ${_alias}AUTH_P AS ${_asPrefix}AUTH_P, ${_alias}AUTH_E AS ${_asPrefix}AUTH_E, ${_alias}MENU_CODE AS ${_asPrefix}MENU_CODE, ${_alias}MENU_NAME AS ${_asPrefix}MENU_NAME, ${_alias}SORT_ORDER AS ${_asPrefix}SORT_ORDER, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}MASTER_YN AS ${_asPrefix}MASTER_YN, ${_alias}AUTH_YN AS ${_asPrefix}AUTH_YN, ${_alias}ROOT_ID AS ${_asPrefix}ROOT_ID        </when>
        <otherwise>
            ${_alias}COMPANY_CODE, ${_alias}USER_ID, ${_alias}SYS_ID, ${_alias}PGM_CODE, ${_alias}AUTH_I, ${_alias}AUTH_R, ${_alias}AUTH_D, ${_alias}AUTH_P, ${_alias}AUTH_E, ${_alias}MENU_CODE, ${_alias}MENU_NAME, ${_alias}SORT_ORDER, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}MASTER_YN, ${_alias}AUTH_YN, ${_alias}ROOT_ID        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}AUTH_I AS ${_asPrefix}AUTH_I, ${_alias}AUTH_R AS ${_asPrefix}AUTH_R, ${_alias}AUTH_D AS ${_asPrefix}AUTH_D, ${_alias}AUTH_P AS ${_asPrefix}AUTH_P, ${_alias}AUTH_E AS ${_asPrefix}AUTH_E, ${_alias}MENU_CODE AS ${_asPrefix}MENU_CODE, ${_alias}MENU_NAME AS ${_asPrefix}MENU_NAME, ${_alias}SORT_ORDER AS ${_asPrefix}SORT_ORDER, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO, ${_alias}MASTER_YN AS ${_asPrefix}MASTER_YN, ${_alias}AUTH_YN AS ${_asPrefix}AUTH_YN, ${_alias}ROOT_ID AS ${_asPrefix}ROOT_ID        </when>
        <otherwise>
            ${_alias}AUTH_I, ${_alias}AUTH_R, ${_alias}AUTH_D, ${_alias}AUTH_P, ${_alias}AUTH_E, ${_alias}MENU_CODE, ${_alias}MENU_NAME, ${_alias}SORT_ORDER, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}MASTER_YN, ${_alias}AUTH_YN, ${_alias}ROOT_ID        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}COMPANY_CODE, ${_alias}USER_ID, ${_alias}SYS_ID, ${_alias}PGM_CODE, ${_alias}AUTH_I, ${_alias}AUTH_R, ${_alias}AUTH_D, ${_alias}AUTH_P, ${_alias}AUTH_E, ${_alias}MENU_CODE, ${_alias}MENU_NAME, ${_alias}SORT_ORDER, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}MASTER_YN, ${_alias}AUTH_YN, ${_alias}ROOT_ID    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}AUTH_I, ${_alias}AUTH_R, ${_alias}AUTH_D, ${_alias}AUTH_P, ${_alias}AUTH_E, ${_alias}MENU_CODE, ${_alias}MENU_NAME, ${_alias}SORT_ORDER, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_INPUT_IP, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO, ${_alias}MASTER_YN, ${_alias}AUTH_YN, ${_alias}ROOT_ID    </sql>

    <select id="simpleGetSmAuthUserMenu" parameterType="long" resultMap="simpleSmAuthUserMenuResult_">
        /* com.neofect.gts.core.services.sm.repository.SmAuthUserMenuRepository_.simpleGetSmAuthUserMenu */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.SM_AUTH_USER_MENU
        WHERE
        COMPANY_CODE = #{companyCode}
        AND USER_ID = #{userId}
        AND SYS_ID = #{sysId}
        AND PGM_CODE = #{pgmCode}
	</select>

    <select id="simpleListSmAuthUserMenuCnt" resultType="int">
        /* com.neofect.gts.core.services.sm.repository.SmAuthUserMenuRepository_.simpleListSmAuthUserMenuCnt */

        SELECT COUNT(*)
        FROM GTS2016.SM_AUTH_USER_MENU
        <include refid="simpleSmAuthUserMenuCondition_" />
    </select>

    <select id="simpleListSmAuthUserMenu" resultMap="simpleSmAuthUserMenuResult_">
        /* com.neofect.gts.core.services.sm.repository.SmAuthUserMenuRepository_.simpleListSmAuthUserMenu */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.SM_AUTH_USER_MENU
        <include refid="simpleSmAuthUserMenuCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="authI != null and authI != ''">
            ${_alias}AUTH_I = #{authI},
        </if>
        <if test="authR != null and authR != ''">
            ${_alias}AUTH_R = #{authR},
        </if>
        <if test="authD != null and authD != ''">
            ${_alias}AUTH_D = #{authD},
        </if>
        <if test="authP != null and authP != ''">
            ${_alias}AUTH_P = #{authP},
        </if>
        <if test="authE != null and authE != ''">
            ${_alias}AUTH_E = #{authE},
        </if>
        <if test="menuCode != null and menuCode != ''">
            ${_alias}MENU_CODE = #{menuCode},
        </if>
        <if test="menuName != null and menuName != ''">
            ${_alias}MENU_NAME = #{menuName},
        </if>
        <if test="sortOrder != null">
            ${_alias}SORT_ORDER = #{sortOrder},
        </if>
        <if test="rowInputDate != null">
            ${_alias}ROW_INPUT_DATE = #{rowInputDate},
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo},
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            ${_alias}ROW_INPUT_IP = #{rowInputIp},
        </if>
        <if test="rowUpdateDate != null">
            ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate},
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            ${_alias}ROW_UPDATE_IP = #{rowUpdateIp},
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo},
        </if>
        <if test="masterYn != null and masterYn != ''">
            ${_alias}MASTER_YN = #{masterYn},
        </if>
        <if test="authYn != null and authYn != ''">
            ${_alias}AUTH_YN = #{authYn},
        </if>
        <if test="rootId != null and rootId != ''">
            ${_alias}ROOT_ID = #{rootId},
        </if>
    </sql>

    <update id="updateSmAuthUserMenu" parameterType="com.neofect.gts.core.services.sm.domain.SmAuthUserMenu">
        /* com.neofect.gts.core.services.sm.repository.SmAuthUserMenuRepository_.updateSmAuthUserMenu */

        UPDATE GTS2016.SM_AUTH_USER_MENU
        SET
             AUTH_I = #{authI}
            , AUTH_R = #{authR}
            , AUTH_D = #{authD}
            , AUTH_P = #{authP}
            , AUTH_E = #{authE}
            , MENU_CODE = #{menuCode}
            , MENU_NAME = #{menuName}
            , SORT_ORDER = #{sortOrder}
            , ROW_INPUT_DATE = #{rowInputDate}
            , ROW_INPUT_EMP_NO = #{rowInputEmpNo}
            , ROW_INPUT_IP = #{rowInputIp}
            , ROW_UPDATE_DATE = #{rowUpdateDate}
            , ROW_UPDATE_IP = #{rowUpdateIp}
            , ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
            , MASTER_YN = #{masterYn}
            , AUTH_YN = #{authYn}
            , ROOT_ID = #{rootId}
        WHERE
            COMPANY_CODE = #{companyCode}
            AND USER_ID = #{userId}
            AND SYS_ID = #{sysId}
            AND PGM_CODE = #{pgmCode}
    </update>

    <update id="updateSmAuthUserMenuDynamic" parameterType="com.neofect.gts.core.services.sm.domain.SmAuthUserMenu">
        /* com.neofect.gts.core.services.sm.repository.SmAuthUserMenuRepository_.updateSmAuthUserMenuDynamic */

        UPDATE GTS2016.SM_AUTH_USER_MENU
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            COMPANY_CODE = #{companyCode}
            AND USER_ID = #{userId}
            AND SYS_ID = #{sysId}
            AND PGM_CODE = #{pgmCode}
    </update>

    <delete id="deleteSmAuthUserMenu" parameterType="long">
        /* com.neofect.gts.core.services.sm.repository.SmAuthUserMenuRepository_.deleteSmAuthUserMenu */

        DELETE FROM GTS2016.SM_AUTH_USER_MENU
        WHERE
            COMPANY_CODE = #{companyCode}
            AND USER_ID = #{userId}
            AND SYS_ID = #{sysId}
            AND PGM_CODE = #{pgmCode}
    </delete>

    <sql id="insert_values_">

        #{authI},
        #{authR},
        #{authD},
        #{authP},
        #{authE},
        #{menuCode},
        #{menuName},
        #{sortOrder},
        #{rowInputDate},
        #{rowInputEmpNo},
        #{rowInputIp},
        #{rowUpdateDate},
        #{rowUpdateIp},
        #{rowUpdateEmpNo},
        #{masterYn},
        #{authYn},
        #{rootId}
    </sql>

    <insert id="insertSmAuthUserMenu">
        /* com.neofect.gts.core.services.sm.repository.SmAuthUserMenuRepository_.insertSmAuthUserMenu */


        INSERT INTO GTS2016.SM_AUTH_USER_MENU
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

