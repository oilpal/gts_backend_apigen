<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.sm.repository.SmAuthGroupRepository_">

    <resultMap id="simpleSmAuthGroupResult_" type="com.neofect.gts.core.services.sm.domain.SmAuthGroup">
        
        <id     property="companyCode" column="COMPANY_CODE"/>
        
        <id     property="userGroupCode" column="USER_GROUP_CODE"/>
        
        <result property="userGroupName" column="USER_GROUP_NAME"/>
        
        <result property="remarks" column="REMARKS"/>
        
        <result property="rowInputDate" column="ROW_INPUT_DATE"/>
        
        <result property="rowInputIp" column="ROW_INPUT_IP"/>
        
        <result property="rowInputEmpNo" column="ROW_INPUT_EMP_NO"/>
        
        <result property="rowUpdateDate" column="ROW_UPDATE_DATE"/>
        
        <result property="rowUpdateIp" column="ROW_UPDATE_IP"/>
        
        <result property="rowUpdateEmpNo" column="ROW_UPDATE_EMP_NO"/>
    </resultMap>

    <sql id="simpleSmAuthGroupCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="companyCodes != null and !companyCodes.isEmpty()">
            AND ${_alias}COMPANY_CODE IN <foreach collection="companyCodes" item="companyCodeValue" open="(" close=")" separator=",">#{ companyCodeValue }</foreach>
        </if>
        <if test="userGroupCodes != null and !userGroupCodes.isEmpty()">
            AND ${_alias}USER_GROUP_CODE IN <foreach collection="userGroupCodes" item="userGroupCodeValue" open="(" close=")" separator=",">#{ userGroupCodeValue }</foreach>
        </if>
        <if test="companyCode != null and companyCode != ''">
            AND ${_alias}COMPANY_CODE = #{companyCode}
        </if>
        <if test="userGroupCode != null and userGroupCode != ''">
            AND ${_alias}USER_GROUP_CODE = #{userGroupCode}
        </if>
        <if test="userGroupName != null and userGroupName != ''">
            AND ${_alias}USER_GROUP_NAME = #{userGroupName}
        </if>
        <if test="remarks != null and remarks != ''">
            AND ${_alias}REMARKS = #{remarks}
        </if>
        <if test="rowInputDate != null and rowInputDate.enabled == true">
            <if test="rowInputDate.from != null and rowInputDate.from != ''">
            AND ${_alias}ROW_INPUT_DATE >= TO_DATE(#{rowInputDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowInputDate.to != null and rowInputDate.to != ''">
            AND ${_alias}ROW_INPUT_DATE <![CDATA[ < ]]> TO_DATE(#{rowInputDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            AND ${_alias}ROW_INPUT_IP = #{rowInputIp}
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            AND ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo}
        </if>
        <if test="rowUpdateDate != null and rowUpdateDate.enabled == true">
            <if test="rowUpdateDate.from != null and rowUpdateDate.from != ''">
            AND ${_alias}ROW_UPDATE_DATE >= TO_DATE(#{rowUpdateDate.from}, 'YYYY.MM.DD')
            </if>
            <if test="rowUpdateDate.to != null and rowUpdateDate.to != ''">
            AND ${_alias}ROW_UPDATE_DATE <![CDATA[ < ]]> TO_DATE(#{rowUpdateDate.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            AND ${_alias}ROW_UPDATE_IP = #{rowUpdateIp}
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            AND ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}COMPANY_CODE AS ${_asPrefix}COMPANY_CODE, ${_alias}USER_GROUP_CODE AS ${_asPrefix}USER_GROUP_CODE, ${_alias}USER_GROUP_NAME AS ${_asPrefix}USER_GROUP_NAME, ${_alias}REMARKS AS ${_asPrefix}REMARKS, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO        </when>
        <otherwise>
            ${_alias}COMPANY_CODE, ${_alias}USER_GROUP_CODE, ${_alias}USER_GROUP_NAME, ${_alias}REMARKS, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}USER_GROUP_NAME AS ${_asPrefix}USER_GROUP_NAME, ${_alias}REMARKS AS ${_asPrefix}REMARKS, ${_alias}ROW_INPUT_DATE AS ${_asPrefix}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP AS ${_asPrefix}ROW_INPUT_IP, ${_alias}ROW_INPUT_EMP_NO AS ${_asPrefix}ROW_INPUT_EMP_NO, ${_alias}ROW_UPDATE_DATE AS ${_asPrefix}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP AS ${_asPrefix}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO AS ${_asPrefix}ROW_UPDATE_EMP_NO        </when>
        <otherwise>
            ${_alias}USER_GROUP_NAME, ${_alias}REMARKS, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}COMPANY_CODE, ${_alias}USER_GROUP_CODE, ${_alias}USER_GROUP_NAME, ${_alias}REMARKS, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}USER_GROUP_NAME, ${_alias}REMARKS, ${_alias}ROW_INPUT_DATE, ${_alias}ROW_INPUT_IP, ${_alias}ROW_INPUT_EMP_NO, ${_alias}ROW_UPDATE_DATE, ${_alias}ROW_UPDATE_IP, ${_alias}ROW_UPDATE_EMP_NO    </sql>

    <select id="simpleGetSmAuthGroup" parameterType="long" resultMap="simpleSmAuthGroupResult_">
        /* com.neofect.gts.core.services.sm.repository.SmAuthGroupRepository_.simpleGetSmAuthGroup */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.SM_AUTH_GROUP
        WHERE
        COMPANY_CODE = #{companyCode}
        AND USER_GROUP_CODE = #{userGroupCode}
	</select>

    <select id="simpleListSmAuthGroupCnt" resultType="int">
        /* com.neofect.gts.core.services.sm.repository.SmAuthGroupRepository_.simpleListSmAuthGroupCnt */

        SELECT COUNT(*)
        FROM GTS2016.SM_AUTH_GROUP
        <include refid="simpleSmAuthGroupCondition_" />
    </select>

    <select id="simpleListSmAuthGroup" resultMap="simpleSmAuthGroupResult_">
        /* com.neofect.gts.core.services.sm.repository.SmAuthGroupRepository_.simpleListSmAuthGroup */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.SM_AUTH_GROUP
        <include refid="simpleSmAuthGroupCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="userGroupName != null and userGroupName != ''">
            ${_alias}USER_GROUP_NAME = #{userGroupName},
        </if>
        <if test="remarks != null and remarks != ''">
            ${_alias}REMARKS = #{remarks},
        </if>
        <if test="rowInputDate != null">
            ${_alias}ROW_INPUT_DATE = #{rowInputDate},
        </if>
        <if test="rowInputIp != null and rowInputIp != ''">
            ${_alias}ROW_INPUT_IP = #{rowInputIp},
        </if>
        <if test="rowInputEmpNo != null and rowInputEmpNo != ''">
            ${_alias}ROW_INPUT_EMP_NO = #{rowInputEmpNo},
        </if>
        <if test="rowUpdateDate != null">
            ${_alias}ROW_UPDATE_DATE = #{rowUpdateDate},
        </if>
        <if test="rowUpdateIp != null and rowUpdateIp != ''">
            ${_alias}ROW_UPDATE_IP = #{rowUpdateIp},
        </if>
        <if test="rowUpdateEmpNo != null and rowUpdateEmpNo != ''">
            ${_alias}ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo},
        </if>
    </sql>

    <update id="updateSmAuthGroup" parameterType="com.neofect.gts.core.services.sm.domain.SmAuthGroup">
        /* com.neofect.gts.core.services.sm.repository.SmAuthGroupRepository_.updateSmAuthGroup */

        UPDATE GTS2016.SM_AUTH_GROUP
        SET
             USER_GROUP_NAME = #{userGroupName}
            , REMARKS = #{remarks}
            , ROW_INPUT_DATE = #{rowInputDate}
            , ROW_INPUT_IP = #{rowInputIp}
            , ROW_INPUT_EMP_NO = #{rowInputEmpNo}
            , ROW_UPDATE_DATE = #{rowUpdateDate}
            , ROW_UPDATE_IP = #{rowUpdateIp}
            , ROW_UPDATE_EMP_NO = #{rowUpdateEmpNo}
        WHERE
            COMPANY_CODE = #{companyCode}
            AND USER_GROUP_CODE = #{userGroupCode}
    </update>

    <update id="updateSmAuthGroupDynamic" parameterType="com.neofect.gts.core.services.sm.domain.SmAuthGroup">
        /* com.neofect.gts.core.services.sm.repository.SmAuthGroupRepository_.updateSmAuthGroupDynamic */

        UPDATE GTS2016.SM_AUTH_GROUP
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            COMPANY_CODE = #{companyCode}
            AND USER_GROUP_CODE = #{userGroupCode}
    </update>

    <delete id="deleteSmAuthGroup" parameterType="long">
        /* com.neofect.gts.core.services.sm.repository.SmAuthGroupRepository_.deleteSmAuthGroup */

        DELETE FROM GTS2016.SM_AUTH_GROUP
        WHERE
            COMPANY_CODE = #{companyCode}
            AND USER_GROUP_CODE = #{userGroupCode}
    </delete>

    <sql id="insert_values_">

        #{userGroupName},
        #{remarks},
        #{rowInputDate},
        #{rowInputIp},
        #{rowInputEmpNo},
        #{rowUpdateDate},
        #{rowUpdateIp},
        #{rowUpdateEmpNo}
    </sql>

    <insert id="insertSmAuthGroup">
        /* com.neofect.gts.core.services.sm.repository.SmAuthGroupRepository_.insertSmAuthGroup */


        INSERT INTO GTS2016.SM_AUTH_GROUP
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

