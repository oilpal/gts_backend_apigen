<?xml version="1.0" encoding="UTF-8"?>
<!--
 ! Source code generated by UnvUS.
 ! Copyright(c) 2017 unvus.com All rights reserved.
 ! Template skrull-pack-mybatis:src/main/resources/mybatis/sql/MybatisBase.e.vm.xml
 ! Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neofect.gts.core.services.xg.repository.XgComtnLoginlogRepository_">

    <resultMap id="simpleXgComtnLoginlogResult_" type="com.neofect.gts.core.services.xg.domain.XgComtnLoginlog">
        
        <id     property="companyCode" column="COMPANY_CODE"/>
        
        <id     property="logId" column="LOG_ID"/>
        
        <result property="conectId" column="CONECT_ID"/>
        
        <result property="conectIp" column="CONECT_IP"/>
        
        <result property="conectMthd" column="CONECT_MTHD"/>
        
        <result property="errorOccrrncAt" column="ERROR_OCCRRNC_AT"/>
        
        <result property="errorCode" column="ERROR_CODE"/>
        
        <result property="creatDt" column="CREAT_DT"/>
    </resultMap>

    <sql id="simpleXgComtnLoginlogCondition_">
        <where>
            <include refid="conditions_" />
        </where>
    </sql>

    <sql id="conditions_">
        <include refid="Common.bindAlias"/>
        <if test="companyCodes != null and !companyCodes.isEmpty()">
            AND ${_alias}COMPANY_CODE IN <foreach collection="companyCodes" item="companyCodeValue" open="(" close=")" separator=",">#{ companyCodeValue }</foreach>
        </if>
        <if test="logIds != null and !logIds.isEmpty()">
            AND ${_alias}LOG_ID IN <foreach collection="logIds" item="logIdValue" open="(" close=")" separator=",">#{ logIdValue }</foreach>
        </if>
        <if test="companyCode != null and companyCode != ''">
            AND ${_alias}COMPANY_CODE = #{companyCode}
        </if>
        <if test="logId != null and logId != ''">
            AND ${_alias}LOG_ID = #{logId}
        </if>
        <if test="conectId != null and conectId != ''">
            AND ${_alias}CONECT_ID = #{conectId}
        </if>
        <if test="conectIp != null and conectIp != ''">
            AND ${_alias}CONECT_IP = #{conectIp}
        </if>
        <if test="conectMthd != null and conectMthd != ''">
            AND ${_alias}CONECT_MTHD = #{conectMthd}
        </if>
        <if test="errorOccrrncAt != null and errorOccrrncAt != ''">
            AND ${_alias}ERROR_OCCRRNC_AT = #{errorOccrrncAt}
        </if>
        <if test="errorCode != null and errorCode != ''">
            AND ${_alias}ERROR_CODE = #{errorCode}
        </if>
        <if test="creatDt != null and creatDt.enabled == true">
            <if test="creatDt.from != null and creatDt.from != ''">
            AND ${_alias}CREAT_DT >= TO_DATE(#{creatDt.from}, 'YYYY.MM.DD')
            </if>
            <if test="creatDt.to != null and creatDt.to != ''">
            AND ${_alias}CREAT_DT <![CDATA[ < ]]> TO_DATE(#{creatDt.to}, 'YYYY.MM.DD') + (INTERVAL '1' DAY)
            </if>
        </if>
    </sql>

    <sql id="columns_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}COMPANY_CODE AS ${_asPrefix}COMPANY_CODE, ${_alias}LOG_ID AS ${_asPrefix}LOG_ID, ${_alias}CONECT_ID AS ${_asPrefix}CONECT_ID, ${_alias}CONECT_IP AS ${_asPrefix}CONECT_IP, ${_alias}CONECT_MTHD AS ${_asPrefix}CONECT_MTHD, ${_alias}ERROR_OCCRRNC_AT AS ${_asPrefix}ERROR_OCCRRNC_AT, ${_alias}ERROR_CODE AS ${_asPrefix}ERROR_CODE, ${_alias}CREAT_DT AS ${_asPrefix}CREAT_DT        </when>
        <otherwise>
            ${_alias}COMPANY_CODE, ${_alias}LOG_ID, ${_alias}CONECT_ID, ${_alias}CONECT_IP, ${_alias}CONECT_MTHD, ${_alias}ERROR_OCCRRNC_AT, ${_alias}ERROR_CODE, ${_alias}CREAT_DT        </otherwise>
        </choose>
    </sql>

    <sql id="columns_without_id_">
        <include refid="Common.bindAlias"/>
        <include refid="Common.bindAsPrefix"/>

        <choose>
        <when test="'${_asPrefix}' != '' and !'${_asPrefix}'.endsWith('}')">
            ${_alias}CONECT_ID AS ${_asPrefix}CONECT_ID, ${_alias}CONECT_IP AS ${_asPrefix}CONECT_IP, ${_alias}CONECT_MTHD AS ${_asPrefix}CONECT_MTHD, ${_alias}ERROR_OCCRRNC_AT AS ${_asPrefix}ERROR_OCCRRNC_AT, ${_alias}ERROR_CODE AS ${_asPrefix}ERROR_CODE, ${_alias}CREAT_DT AS ${_asPrefix}CREAT_DT        </when>
        <otherwise>
            ${_alias}CONECT_ID, ${_alias}CONECT_IP, ${_alias}CONECT_MTHD, ${_alias}ERROR_OCCRRNC_AT, ${_alias}ERROR_CODE, ${_alias}CREAT_DT        </otherwise>
        </choose>
    </sql>


    <sql id="ins_columns_">
        <include refid="Common.bindAlias"/>
        ${_alias}COMPANY_CODE, ${_alias}LOG_ID, ${_alias}CONECT_ID, ${_alias}CONECT_IP, ${_alias}CONECT_MTHD, ${_alias}ERROR_OCCRRNC_AT, ${_alias}ERROR_CODE, ${_alias}CREAT_DT    </sql>

    <sql id="ins_columns_without_id_">
        <include refid="Common.bindAlias"/>
        ${_alias}CONECT_ID, ${_alias}CONECT_IP, ${_alias}CONECT_MTHD, ${_alias}ERROR_OCCRRNC_AT, ${_alias}ERROR_CODE, ${_alias}CREAT_DT    </sql>

    <select id="simpleGetXgComtnLoginlog" parameterType="long" resultMap="simpleXgComtnLoginlogResult_">
        /* com.neofect.gts.core.services.xg.repository.XgComtnLoginlogRepository_.simpleGetXgComtnLoginlog */

        SELECT
            <include refid="columns_" />
        FROM
            GTS2016.XG_COMTN_LOGINLOG
        WHERE
        COMPANY_CODE = #{companyCode}
        AND LOG_ID = #{logId}
	</select>

    <select id="simpleListXgComtnLoginlogCnt" resultType="int">
        /* com.neofect.gts.core.services.xg.repository.XgComtnLoginlogRepository_.simpleListXgComtnLoginlogCnt */

        SELECT COUNT(*)
        FROM GTS2016.XG_COMTN_LOGINLOG
        <include refid="simpleXgComtnLoginlogCondition_" />
    </select>

    <select id="simpleListXgComtnLoginlog" resultMap="simpleXgComtnLoginlogResult_">
        /* com.neofect.gts.core.services.xg.repository.XgComtnLoginlogRepository_.simpleListXgComtnLoginlog */
        <include refid="Common.pagingHeader-oracle"/>
        SELECT
            <include refid="columns_" />
        FROM GTS2016.XG_COMTN_LOGINLOG
        <include refid="simpleXgComtnLoginlogCondition_" />
        <include refid="Common.sort"/>
        <include refid="Common.pagingFooter-oracle"/>
	</select>

    <sql id="update_dynamic_content_">
        <include refid="Common.bindAlias"/>
        <if test="conectId != null and conectId != ''">
            ${_alias}CONECT_ID = #{conectId},
        </if>
        <if test="conectIp != null and conectIp != ''">
            ${_alias}CONECT_IP = #{conectIp},
        </if>
        <if test="conectMthd != null and conectMthd != ''">
            ${_alias}CONECT_MTHD = #{conectMthd},
        </if>
        <if test="errorOccrrncAt != null and errorOccrrncAt != ''">
            ${_alias}ERROR_OCCRRNC_AT = #{errorOccrrncAt},
        </if>
        <if test="errorCode != null and errorCode != ''">
            ${_alias}ERROR_CODE = #{errorCode},
        </if>
        <if test="creatDt != null">
            ${_alias}CREAT_DT = #{creatDt},
        </if>
    </sql>

    <update id="updateXgComtnLoginlog" parameterType="com.neofect.gts.core.services.xg.domain.XgComtnLoginlog">
        /* com.neofect.gts.core.services.xg.repository.XgComtnLoginlogRepository_.updateXgComtnLoginlog */

        UPDATE GTS2016.XG_COMTN_LOGINLOG
        SET
             CONECT_ID = #{conectId}
            , CONECT_IP = #{conectIp}
            , CONECT_MTHD = #{conectMthd}
            , ERROR_OCCRRNC_AT = #{errorOccrrncAt}
            , ERROR_CODE = #{errorCode}
            , CREAT_DT = #{creatDt}
        WHERE
            COMPANY_CODE = #{companyCode}
            AND LOG_ID = #{logId}
    </update>

    <update id="updateXgComtnLoginlogDynamic" parameterType="com.neofect.gts.core.services.xg.domain.XgComtnLoginlog">
        /* com.neofect.gts.core.services.xg.repository.XgComtnLoginlogRepository_.updateXgComtnLoginlogDynamic */

        UPDATE GTS2016.XG_COMTN_LOGINLOG
            <set>
            <include refid="update_dynamic_content_" />
            </set>
        WHERE
            COMPANY_CODE = #{companyCode}
            AND LOG_ID = #{logId}
    </update>

    <delete id="deleteXgComtnLoginlog" parameterType="long">
        /* com.neofect.gts.core.services.xg.repository.XgComtnLoginlogRepository_.deleteXgComtnLoginlog */

        DELETE FROM GTS2016.XG_COMTN_LOGINLOG
        WHERE
            COMPANY_CODE = #{companyCode}
            AND LOG_ID = #{logId}
    </delete>

    <sql id="insert_values_">

        #{conectId},
        #{conectIp},
        #{conectMthd},
        #{errorOccrrncAt},
        #{errorCode},
        #{creatDt}
    </sql>

    <insert id="insertXgComtnLoginlog">
        /* com.neofect.gts.core.services.xg.repository.XgComtnLoginlogRepository_.insertXgComtnLoginlog */


        INSERT INTO GTS2016.XG_COMTN_LOGINLOG
        (
        <include refid="ins_columns_without_id_" />
        )
        VALUES (
        <include refid="insert_values_" />
        )
        <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER">
            SELECT LAST_INSERT_ID()
        </selectKey>

	</insert>

</mapper>

