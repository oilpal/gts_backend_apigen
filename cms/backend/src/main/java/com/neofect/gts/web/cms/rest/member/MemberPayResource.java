/*
 * Source code generated by UnvUS.
 * Copyright(c) 2017 unvus.com All rights reserved.
 * Template skrull-pack-mybatis:src/main/java/rest/Rest.e.vm.java
 * Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
 */
package com.neofect.gts.web.cms.rest.member;

import java.net.URISyntaxException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.google.common.collect.ImmutableMap;
import com.neofect.gts.core.services.member.domain.MemberPay;
import com.neofect.gts.core.services.member.service.MemberPayService;
import com.unvus.web.util.PaginationUtil;

import lombok.extern.slf4j.Slf4j;

/**
 * Rest for {@link MemberPay}<br/>
 */
@Slf4j
@RestController
@RequestMapping("/api")
public class MemberPayResource {

    private final MemberPayService memberPayService;

    public MemberPayResource(MemberPayService memberPayService) {
        this.memberPayService = memberPayService;
    }

    //region ------------------------------------------------------------------------------------------------ memberPay API

    /**
     *
     */
    @GetMapping(value = "/member-pay", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<MemberPay>> listMemberPay(@RequestParam(value = "q", required = false) Map<String, Object> q) throws URISyntaxException {
        if (q == null) {
            q = new HashMap();
        }

        List<MemberPay> memberPayList = memberPayService.listMemberPay(q);

        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders();

        return new ResponseEntity<>(memberPayList, headers, HttpStatus.OK);
    }

    /**
     * get count
     * @return
     */
    @GetMapping(value = "/member-pay/_count", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Map> getCount(@RequestParam(value = "q", required = false) Map<String, Object> q) {
        int count = memberPayService.listMemberPayCnt(q);

        return new ResponseEntity<>(ImmutableMap.of("count", count), HttpStatus.OK);
    }

    /**
     * get empty object
     * @return
     */
    @GetMapping(value = "/member-pay/_empty", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<MemberPay> getEmptyMemberPay() {
        MemberPay memberPay = new MemberPay();
        return new ResponseEntity<>(memberPay, HttpStatus.OK);
    }

    /**
     * get
     */
    @GetMapping(value = "/member-pay/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<MemberPay> getMemberPay(@PathVariable("id") Long id) {
        MemberPay memberPay = memberPayService.getMemberPay(id);
        return new ResponseEntity<>(memberPay, HttpStatus.OK);
    }

    /**
     * add
     */
    @PostMapping("/member-pay")
    public ResponseEntity<Void> addMemberPay(@RequestBody MemberPay memberPay) {
        memberPayService.saveMemberPay(memberPay);

        return ResponseEntity.ok().build();
    }

    /**
     * modify
     */
    @PutMapping("/member-pay/{id}")
    public ResponseEntity<Void> updateMemberPay(@PathVariable("id") Long id, @RequestBody MemberPay memberPay) throws Exception {
        // if (!id.equals(memberPay.getId())) {
        //     return new ResponseEntity(HttpStatus.BAD_REQUEST);
        // }
        memberPayService.saveMemberPay(memberPay);
        return ResponseEntity.ok().build();
    }

    /**
     * delete
     */
    @DeleteMapping("/member-pay/{id}")
    public ResponseEntity<Void> removeMemberPay(@PathVariable("id") Long id) {
        memberPayService.removeMemberPay(id);
        return ResponseEntity.ok().build();
    }

    //endregion

}
