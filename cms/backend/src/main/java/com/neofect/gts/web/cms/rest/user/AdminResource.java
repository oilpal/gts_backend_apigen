/*
 * Source code generated by UnvUS.
 * Copyright(c) 2017 unvus.com All rights reserved.
 * Template pack-unvus-mybatis:src/main/java/rest/Rest.e.vm.java
 * Template is part of project: https://git.unvus.com/unvus/opensource/pack-unvus-mybatis
 */
package com.neofect.gts.web.cms.rest.user;

import com.google.common.collect.ImmutableMap;
import com.unvus.domain.Authority;
import com.neofect.gts.core.services.user.domain.User;
import com.neofect.gts.core.services.user.domain.UserAccount;
import com.neofect.gts.core.services.user.domain.enums.AccountType;
import com.neofect.gts.core.services.user.service.UserService;
import com.unvus.util.SecurityUtils;
import com.unvus.web.util.PaginationUtil;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.net.URISyntaxException;
import java.util.*;

/**
 * Rest for {@link User}<br/>
 */
@Slf4j
@RestController
@RequestMapping("/api")
public class AdminResource {

    private final UserService userService;

    public AdminResource(UserService userService) {
        this.userService = userService;
    }

    //region ------------------------------------------------------------------------------------------------ admin API


    @GetMapping("/admin/principal")
    public ResponseEntity<UserAccount> getCurrentPrincipal() {
//        UserDetails userDetails = SecurityUtils.getCurrentUser();
//        User user = userService.getUserByLogin(userDetails.getUsername());
        UserAccount currentUser = (UserAccount) SecurityUtils.getCurrentUser();
        UserAccount userAccount = userService.getUserAccountForLogin(currentUser.getLogin(), AccountType.ADMIN);

        Set<Authority> authorities = new HashSet<>();
        authorities.add(new Authority("ROLE_CMS"));
        userAccount.setAuthorities(authorities);
        return new ResponseEntity<>(userAccount, HttpStatus.OK);
    }

    /**
     *
     */
    @GetMapping(value = "/admin", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<User>> listDoctor(@RequestParam(value = "q", required = false) Map<String, Object> q)
            throws URISyntaxException {
        if (q == null) {
            q = new HashMap();
        }

        q.put("loginNot", "system");
        List<User> doctorList = userService.listUser(q);

        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders();

        return new ResponseEntity<>(doctorList, headers, HttpStatus.OK);
    }

    /**
     * get count
     * @return
     */
    @GetMapping(value = "/admin/_count", produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<Map> getCount(@RequestParam(value = "q", required = false) Map<String, Object> q) {
        int count = userService.listUserCnt(q);

        return new ResponseEntity<>(ImmutableMap.of("count", count), HttpStatus.OK);
    }


    /**
     * delete
     */
    @DeleteMapping("/admin/{id}")
    public ResponseEntity<Void> removeDoctor(@PathVariable("id") Long id) throws Exception{
        userService.removeUser(id);
        return ResponseEntity.ok().build();
    }

    //endregion

}
